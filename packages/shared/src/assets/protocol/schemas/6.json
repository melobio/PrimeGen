{
  "$id": "opentronsProtocolSchemaV6",
  "$schema": "http://json-schema.org/draft-07/schema#",

  "definitions": {
    "pipetteName": {
      "description": "Name of a pipette. Does not contain info about specific model/version. Should match keys in pipetteNameSpecs.json file",
      "type": "string",
      "enum": [
        "p10_single",
        "p10_multi",
        "p20_single_gen2",
        "p20_multi_gen2",
        "p50_single",
        "p50_multi",
        "p300_single",
        "p300_multi",
        "p300_single_gen2",
        "p300_multi_gen2",
        "p1000_single",
        "p1000_single_gen2"
      ]
    },

    "moduleOnlyParams": {
      "required": ["moduleId"],
      "additionalProperties": false,
      "properties": {
        "moduleId": {
          "type": "string",
          "description": "Unique identifier of module to target. Must be a key from the top level 'modules' object"
        }
      }
    },

    "offset": {
      "description": "x, y, and z component of offset vector in mm",
      "properties": {
        "x": { "type": "number" },
        "y": { "type": "number" },
        "z": { "type": "number" }
      }
    },

    "pipetteAccessParams": {
      "required": ["pipetteId", "labwareId", "wellName"],
      "properties": {
        "pipetteId": {
          "type": "string"
        },
        "labwareId": {
          "type": "string"
        },
        "wellName": {
          "type": "string"
        }
      }
    },

    "volumeParams": {
      "required": ["volume"],
      "volume": {
        "type": "number"
      }
    },

    "flowRate": {
      "required": ["flowRate"],
      "properties": {
        "flowRate": {
          "description": "flow rate in ul/sec",
          "type": "number",
          "exclusiveMinimum": 0
        }
      }
    },

    "wellLocation": {
      "properties": {
        "origin": {
          "type": "string",
          "description": "reference location with respect to a well from which to apply an offset if given (e.g. 'bottom' || 'top')"
        },
        "offset": {
          "$ref": "#/definitions/offset",
          "description": "X, Y, Z offset from the specified origin with respect to well"
        }
      }
    }
  },

  "type": "object",
  "additionalProperties": false,
  "required": [
    "$otSharedSchema",
    "schemaVersion",
    "metadata",
    "robot",
    "pipettes",
    "labware",
    "labwareDefinitions",
    "commands"
  ],
  "properties": {
    "$otSharedSchema": {
      "description": "The path to a valid Opentrons shared schema relative to the shared-data directory, without its extension.",
      "enum": ["#/protocol/schemas/6"]
    },

    "schemaVersion": {
      "description": "Schema version of a protocol is a single integer",
      "enum": [6]
    },

    "metadata": {
      "description": "Optional metadata about the protocol",
      "type": "object",

      "properties": {
        "protocolName": {
          "description": "A short, human-readable name for the protocol",
          "type": "string"
        },
        "author": {
          "description": "The author or organization who created the protocol",
          "type": "string"
        },
        "description": {
          "description": "A text description of the protocol.",
          "type": ["string", "null"]
        },

        "created": {
          "description": "UNIX timestamp when this file was created",
          "type": "number"
        },
        "lastModified": {
          "description": "UNIX timestamp when this file was last modified",
          "type": ["number", "null"]
        },

        "category": {
          "description": "Category of protocol (eg, \"Basic Pipetting\")",
          "type": ["string", "null"]
        },
        "subcategory": {
          "description": "Subcategory of protocol (eg, \"Cell Plating\")",
          "type": ["string", "null"]
        },
        "tags": {
          "description": "Tags to be used in searching for this protocol",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "designerApplication": {
      "description": "Optional data & metadata not required to execute the protocol, used by the application that created this protocol",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the application that created the protocol. Should be namespaced under the organization or individual who owns the organization, eg \"opentrons/protocol-designer\"",
          "type": "string"
        },
        "version": {
          "description": "Version of the application that created the protocol",
          "type": "string"
        },
        "data": {
          "description": "Any data used by the application that created this protocol",
          "type": "object"
        }
      }
    },

    "robot": {
      "required": ["model", "deckId"],
      "properties": {
        "model": {
          "description": "Model of the robot this protocol is written for",
          "type": "string",
          "enum": ["OT-2 Standard", "OT-3 Standard"]
        },
        "deckId": {
          "description": "Identifier of physical deck this protocol is written for. This should match a top-level key in shared-data/deck/definitions/3.json",
          "type": "string"
        }
      }
    },

    "pipettes": {
      "description": "The pipettes used in this protocol, keyed by a unique identifier (pipetteId)",
      "additionalProperties": false,
      "patternProperties": {
        ".+": {
          "description": "Fields describing an individual pipette",
          "type": "object",
          "required": ["name"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "$ref": "#/definitions/pipetteName"
            }
          }
        }
      }
    },

    "labwareDefinitions": {
      "description": "All labware definitions used by labware in this protocol, keyed by a unique identifier (definitionId)",
      "patternProperties": {
        ".+": {
          "$ref": "opentronsLabwareSchemaV2"
        }
      }
    },

    "labware": {
      "description": "All instances of labware used in this protocol, and references to their definitions' labwareId, keyed by a unique identifier (labwareId)",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single labware",
          "type": "object",
          "required": ["definitionId"],
          "additionalProperties": false,
          "properties": {
            "definitionId": {
              "description": "reference to this labware's ID in \"labwareDefinitions\"",
              "type": "string"
            },
            "displayName": {
              "description": "An optional human-readable nickname for this labware instance within this protocol. Eg \"Buffer Trough\"",
              "type": "string"
            }
          }
        }
      }
    },

    "liquids": {
      "description": "All instances of liquid used in this protocol, keyed by a unique identifier (liquidId)",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single liquid",
          "type": "object",
          "required": ["displayName", "description"],
          "properties": {
            "displayName": {
              "description": "An human-readable name for this liquid.",
              "type": "string"
            },
            "description": {
              "description": "A description of this liquid.",
              "type": "string"
            },
            "displayColor": {
              "description": "Hex color code, with hash included, to represent the specified liquid. Standard three-value, four-value, six-value, and eight-value syntax are all acceptable.",
              "type": "string"
            }
          }
        }
      }
    },

    "modules": {
      "description": "All modules used in this protocol keyed by a unique identifier (moduleId)",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single module on the deck",
          "type": "object",
          "required": ["model"],
          "additionalProperties": false,
          "properties": {
            "model": {
              "description": "model of module. Eg 'magneticModuleV1' or 'magneticModuleV2'. This should match a top-level key in shared-data/module/definitions/2.json",
              "type": "string"
            }
          }
        }
      }
    },

    "commands": {
      "description": "An array of command objects representing steps to be executed on the robot",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "description": "Aspirate Liquid / Dispense Liquid / Aspirate Air Gap / Dispense Air Aap",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["aspirate", "dispense"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/flowRate" },
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  { "$ref": "#/definitions/volumeParams" },
                  {
                    "wellLocation": { "$ref": "#/definitions/wellLocation" }
                  }
                ]
              }
            }
          },

          {
            "description": "Blowout",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["blowout"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/flowRate" },
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  {
                    "wellLocation": { "$ref": "#/definitions/wellLocation" }
                  }
                ]
              }
            }
          },

          {
            "description": "Touch Tip",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["touchTip"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  {
                    "wellLocation": { "$ref": "#/definitions/wellLocation" }
                  }
                ]
              }
            }
          },

          {
            "description": "Pick Up Tip / Drop Tip",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["pickUpTip", "dropTip"]
              },
              "params": {
                "allOf": [{ "$ref": "#/definitions/pipetteAccessParams" }]
              }
            }
          },

          {
            "description": "Move To Slot. NOTE: this is an EXPERIMENTAL command, its behavior is subject to change in future releases.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["moveToSlot"] },
              "params": {
                "type": "object",
                "required": ["pipetteId", "slotName"],
                "properties": {
                  "pipetteId": { "type": "string" },
                  "slotName": {
                    "type": "string",
                    "description": "Unique string identifier that corresponds to a slot in the referenced deck definition's locations"
                  },
                  "offset": {
                    "$ref": "#/definitions/offset",
                    "description": "Optional offset from slot bottom left corner, in mm"
                  },
                  "minimumZHeight": {
                    "description": "Optional minimal Z margin in mm. If this is larger than the API's default safe Z margin, it will make the arc higher. If it's smaller, it will have no effect. Specifying this for movements that would not arc (moving within the same well in the same labware) will cause an arc movement instead.",
                    "type": "number",
                    "minimum": 0
                  },
                  "forceDirect": {
                    "description": "If true, moving from one labware/well to another will not arc to the default safe z, but instead will move directly to the specified location. This will also force the `minimumZHeight` param to be ignored. A 'direct' movement is in X/Y/Z simultaneously.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          },

          {
            "description": "Move To Coordinates: Move the pipette's critical point to the specified coordinates. The pipette's critical point is a reference point on the pipette. The critical point can be one of the following: (1) Single-Channel pipette with no tip: end of nozzle. (2) 8-Channel pipette with no tip: end of backmost nozzle. (3) Single-Channel pipette with a tip: end of tip. (4) 8-Channel pipette with tip: end of tip on backmost nozzle.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["moveToCoordinates"] },
              "params": {
                "type": "object",
                "required": ["pipetteId", "coordinates"],
                "properties": {
                  "pipetteId": { "type": "string" },
                  "coordinates": {
                    "$ref": "#/definitions/offset",
                    "description": "X, Y and Z coordinates in mm from deck's origin location (left-front-bottom corner of work space)"
                  },
                  "minimumZHeight": {
                    "description": "Optional minimal Z margin in mm. If this is larger than the API's default safe Z margin, it will make the arc higher. If it's smaller, it will have no effect. Specifying this for movements that would not arc (moving within the same well in the same labware) will cause an arc movement instead.",
                    "type": "number",
                    "minimum": 0
                  },
                  "forceDirect": {
                    "description": "If true, moving from one labware/well to another will not arc to the default safe z, but instead will move directly to the specified location. This will also force the `minimumZHeight` param to be ignored. A 'direct' movement is in X/Y/Z simultaneously.",
                    "type": "boolean",
                    "default": false
                  },
                  "speed": {
                    "description": "Override the travel speed in mm/s. This controls the straight linear speed of motion.",
                    "type": "number",
                    "minimum": 0
                  }
                }
              }
            }
          },

          {
            "description": "Move Relative",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["moveRelative"] },
              "params": {
                "type": "object",
                "required": ["pipetteId", "axis", "distance"],
                "properties": {
                  "pipetteId": { "type": "string" },
                  "axis": {
                    "description": "Axis to move the gantry",
                    "enum": ["x", "y", "z"]
                  },
                  "distance": {
                    "description": "Distance in mm to move the gantry (negative numbers are allowed)",
                    "type": "number"
                  }
                }
              }
            }
          },

          {
            "description": "Save Position",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["savePosition"] },
              "params": {
                "type": "object",
                "required": ["pipetteId"],
                "properties": {
                  "pipetteId": { "type": "string" },
                  "positionId": {
                    "description": "Optional position ID, auto-assigned if left blank",
                    "type": "string"
                  }
                }
              }
            }
          },

          {
            "description": "Home",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["home"] },
              "params": {
                "type": "object",
                "properties": {
                  "axes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "x",
                        "y",
                        "leftZ",
                        "rightZ",
                        "leftPlunger",
                        "rightPlunger"
                      ]
                    }
                  }
                }
              }
            }
          },

          {
            "title": "Delay (deprecated)",
            "description": "Delay protocol execution for a time duration or until the user resumes the protocol. Deprecated; use `waitForResume` or `waitForDuration` commands instead.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["delay"]
              },
              "params": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": ["seconds"],
                    "properties": {
                      "seconds": {
                        "description": "A number of seconds to wait, with fractional values allowed.",
                        "type": "number",
                        "exclusiveMinimum": 0
                      },
                      "message": {
                        "description": "An optional message describing the delay."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": ["waitForResume"],
                    "properties": {
                      "waitForResume": {
                        "description": "A number of seconds to wait, with fractional values allowed.",
                        "enum": [true]
                      },
                      "message": {
                        "description": "An optional message describing the delay."
                      }
                    }
                  }
                ]
              }
            }
          },

          {
            "title": "Wait For Resume",
            "description": "Pause protocol execution until the user manually resumes the protocol.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["waitForResume", "pause"]
              },
              "params": {
                "type": "object",
                "required": [],
                "properties": {
                  "message": {
                    "description": "An optional message describing the pause."
                  }
                }
              }
            }
          },

          {
            "title": "Wait For Duration",
            "description": "Pause protocol execution for a given duration.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["waitForDuration"]
              },
              "params": {
                "type": "object",
                "required": [],
                "properties": {
                  "message": {
                    "description": "An optional message describing the pause."
                  }
                }
              }
            }
          },

          {
            "description": "Magnetic Module Engage: Engage magnet to specified height.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["magneticModule/engage"]
              },
              "params": {
                "required": ["moduleId", "height"],
                "properties": {
                  "height": {
                    "description": "How high, in millimeters, to raise the magnets.\n\nZero means the tops of the magnets are level with the ledge that the labware rests on. This will be slightly above the magnets' minimum height, the hardware home position. Negative values are allowed, to put the magnets below the ledge.\n\nUnits are always true millimeters. This is unlike certain labware definitions, engage commands in the Python Protocol API, and engage commands in older versions of the JSON protocol schema. Take care to convert properly.",
                    "type": "number"
                  },
                  "moduleId": {
                    "description": "Unique identifier of Magnetic Module to target. Must be a key from the top level 'modules' object.",
                    "type": "string"
                  }
                }
              }
            }
          },

          {
            "description": "Magnetic Module Disengage: Retract magnet to disengaged (home) position",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["magneticModule/disengage"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Temperature Module Set Target Temperature: Module will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["temperatureModule/setTargetTemperature"]
              },
              "params": {
                "required": ["moduleId", "celsius"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Temperature Module to target. Must be a key from the top level 'modules' object"
                  },
                  "celsius": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Temperature Module Wait For Temperature: Delay protocol execution until the specified temperature is reached.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["temperatureModule/waitForTemperature"]
              },
              "params": {
                "required": ["moduleId"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Temperature Module to target. Must be a key from the top level 'modules' object"
                  }
                }
              }
            }
          },

          {
            "description": "Temperature Module Deactivate: Module will stop actively controlling its temperature and drift to ambient temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["temperatureModule/deactivate"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Set Target Block Temperature: Well block will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["thermocycler/setTargetBlockTemperature"]
              },
              "params": {
                "required": ["moduleId", "celsius"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Thermocycler Module to target. Must be a key from the top level 'modules' object"
                  },
                  "celsius": {
                    "type": "number",
                    "description": "Target temperature in °C."
                  },
                  "blockMaxVolumeUl": {
                    "type": "number",
                    "description": "Amount of liquid in uL of the most-full well in labware loaded onto the thermocycler."
                  }
                }
              }
            }
          },

          {
            "description": "Thermocycler Set Target Lid Temperature: Lid will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["thermocycler/setTargetLidTemperature"]
              },
              "params": {
                "required": ["moduleId", "celsius"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Thermocycler Module to target. Must be a key from the top level 'modules' object"
                  },
                  "celsius": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Thermocycler Wait For Block Temperature: Delay protocol execution until the specified well block target temperature is reached.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["thermocycler/waitForBlockTemperature"]
              },
              "params": {
                "required": ["moduleId"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Thermocycler Module to target. Must be a key from the top level 'modules' object"
                  }
                }
              }
            }
          },

          {
            "description": "Thermocycler Wait For Lid Temperature: Delay protocol execution until the specified lid target temperature is reached.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/waitForLidTemperature"] },
              "params": {
                "required": ["moduleId"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Thermocycler Module to target. Must be a key from the top level 'modules' object"
                  }
                }
              }
            }
          },

          {
            "description": "Thermocycler Deactivate Block: Module will stop actively controlling its well block temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/deactivateBlock"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Deactivate Lid: Module will stop actively controlling its lid temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/deactivateLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Open Lid: Open lid of the module. This command will delay protocol execution until the lid is fully open.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/openLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Close Lid: Close the lid of the module. This command will delay protocol execution until the lid is fully closed.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/closeLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Run Profile: Run the specified profile steps on the Thermocycler. This command is blocking, it delays protocol execution outside of thermocycler steps.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["thermocycler/runProfile"] },
              "params": {
                "type": "object",
                "required": ["moduleId", "profile"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Thermocycler Module to target. Must be a key from the top level 'modules' object"
                  },
                  "profile": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["celsius", "holdSeconds"],
                      "properties": {
                        "celsius": {
                          "description": "Target temperature (in celsius) of profile step",
                          "type": "number"
                        },
                        "holdSeconds": {
                          "description": "Time (in seconds) to hold once temperature is reached",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "blockMaxVolumeUl": {
                    "type": "number"
                  }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Start Set Target Temperature: Module will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/setTargetTemperature"]
              },
              "params": {
                "required": ["moduleId", "celsius"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Heater Shaker Module to target. Must be a key from the top level 'modules' object"
                  },
                  "celsius": {
                    "type": "number",
                    "description": "target temperature to heat to in °C"
                  }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Set Target Shake Speed: Start the module's shake procedure. The protocol will proceed once the target shake speed is reached.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/setAndWaitForShakeSpeed"]
              },
              "params": {
                "required": ["moduleId", "rpm"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of Heater Shaker Module to target. Must be a key from the top level 'modules' object"
                  },
                  "rpm": {
                    "type": "number",
                    "description": "target orbital rotations per minute"
                  }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Wait For Temperature: Delay protocol execution until the previously supplied startSetTargetTemperature command's temperature parameter has been reached. Errors if no target temperature was set previously.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/waitForTemperature"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Deactivate Heater: Module will stop actively heating and drift to ambient temperature.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/deactivateHeater"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Deactivate Shaker: Module will stop actively shaking and ramp down to a still state",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/deactivateShaker"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Open Latch: Open the module's labware latch.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/openLabwareLatch"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Close Latch: Close the module's labware latch.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["heaterShaker/closeLabwareLatch"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Move To Well: Move the pipette's critical point to the specified well in a labware, with an optional offset. The pipette's critical point is a reference point on the pipette. The critical point can be one of the following: (1) Single-Channel pipette with no tip: end of nozzle. (2) 8-Channel pipette with no tip: end of backmost nozzle. (3) Single-Channel pipette with a tip: end of tip. (4) 8-Channel pipette with tip: end of tip on backmost nozzle.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": { "enum": ["moveToWell"] },
              "params": {
                "type": "object",
                "required": ["pipetteId", "labwareId", "wellName"],
                "properties": {
                  "pipetteId": { "type": "string" },
                  "labwareId": { "type": "string" },
                  "wellName": { "type": "string" },
                  "wellLocation": { "$ref": "#/definitions/wellLocation" },
                  "minimumZHeight": {
                    "description": "Optional minimal Z margin in mm. If this is larger than the API's default safe Z margin, it will make the arc higher. If it's smaller, it will have no effect. Specifying this for movements that would not arc (moving within the same well in the same labware) will cause an arc movement instead.",
                    "type": "number",
                    "minimum": 0
                  },
                  "forceDirect": {
                    "description": "If true, moving from one labware/well to another will not arc to the default safe z, but instead will move directly to the specified location. This will also force the `minimumZHeight` param to be ignored. A 'direct' movement is in X/Y/Z simultaneously.",
                    "type": "boolean",
                    "default": false
                  },
                  "speed": {
                    "description": "Override the travel speed in mm/s. This controls the straight linear speed of motion.",
                    "type": "number",
                    "minimum": 0
                  }
                }
              }
            }
          },

          {
            "description": "Load Pipette: This command is only meant to make the Opentrons system aware of a pipette's location. It does not instruct any specific hardware to carry out the physical action of moving the pipette to the location.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["loadPipette"]
              },
              "params": {
                "required": ["pipetteId", "mount"],
                "properties": {
                  "pipetteId": {
                    "type": "string",
                    "description": "Unique identifier of pipette to load"
                  },
                  "mount": {
                    "type": "string",
                    "description": "Unique identifier of physical destination location to load pipette into (e.g. 'left')"
                  }
                }
              }
            }
          },

          {
            "description": "Load Labware: This command is only meant to make the Opentrons system aware of a labware instance's location. It does not instruct any specific hardware to carry out the physical action of moving the labware instance to the location.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["loadLabware"]
              },
              "params": {
                "description": "Input parameters to the `loadLabware` command. NOTE: Unlike most commands, `loadLabware` commands issued over HTTP have different parameters than ones in JSON protocols. This schema describes JSON protocols.",
                "required": ["labwareId", "location"],
                "properties": {
                  "labwareId": {
                    "type": "string",
                    "description": "Unique identifier of labware to load. Must be a key from the top-level `labware` object."
                  },
                  "location": {
                    "description": "Physical destination location to load labware into (e.g. '1' || 'someModuleId')",
                    "oneOf": [
                      {
                        "required": ["slotName"],
                        "properties": {
                          "slotName": {
                            "description": "Unique string identifier that corresponds to a slot in the referenced deck definition's locations",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "required": ["moduleId"],
                        "properties": {
                          "moduleId": {
                            "description": "Unique identifier of destination module. Must be a key from the top level 'modules' object.",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },

          {
            "description": "Load Module: This command is only meant to make the Opentrons system aware of a module instance's location. It does not instruct any specific hardware to carry out the physical action of moving the module instance to the location.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["loadModule"]
              },
              "params": {
                "required": ["moduleId", "location"],
                "properties": {
                  "moduleId": {
                    "type": "string",
                    "description": "Unique identifier of module to load"
                  },
                  "location": {
                    "description": "Physical destination location to load module into (e.g. '1')",
                    "oneOf": [
                      {
                        "required": ["slotName"],
                        "properties": {
                          "slotName": {
                            "description": "Unique string identifier that corresponds to a slot in the referenced deck definition's locations",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },

          {
            "description": "Load Liquid: This command is only meant to make the Opentrons system aware of a liquid's location. It does not instruct any specific hardware to carry out the physical action of moving the liquid to the location.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["loadLiquid"]
              },
              "params": {
                "required": ["liquidId", "labwareId", "volumeByWell"],
                "properties": {
                  "liquidId": {
                    "type": "string",
                    "description": "Unique identifier of instance of liquid to load. Must be a key from the top level 'liquids' object"
                  },
                  "labwareId": {
                    "type": "string",
                    "description": "Unique identifier of labware to load liquid into. Must be a key from the top level 'labware' object"
                  },
                  "volumeByWell": {
                    "type": "object",
                    "patternProperties": {
                      ".+": {
                        "description": "Volume in µL keyed by wellName from the specified labware",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "description": "Custom: This command is meant to allow non-canonical commands to be included in the commands list.",
            "type": "object",
            "required": ["commandType", "params"],
            "properties": {
              "key": { "type": "string" },
              "commandType": {
                "enum": ["custom"]
              },
              "params": {
                "type": "object",
                "description": "all of the parameters required to identify and execute this command"
              }
            }
          }
        ]
      }
    },

    "commandAnnotations": {
      "type": "array",
      "items": {
        "description": "An optional object of annotations associated with commands.",
        "type": "object",
        "required": ["commandIds", "annotationType"],
        "properties": {
          "commandIds": {
            "description": "An array of command ids that correspond to the targeted grouping of this annotation",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "annotationType": {
            "description": "The type of annotation (e.g. 'transfer', 'initialSetup')",
            "type": "string"
          },
          "params": {
            "description": "The parameters used to create this grouping of atomic commands",
            "type": "object"
          }
        }
      }
    }
  }
}
