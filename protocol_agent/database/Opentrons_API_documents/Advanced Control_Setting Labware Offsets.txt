
All positions relative to labware are adjusted automatically based on labware offset data. When you’re running your code in Jupyter Notebook or with `opentrons_execute`, you need to set your own offsets because you can’t perform run setup and Labware Position Check in the Opentrons App or on the Flex touchscreen. For these applications, do the following to calculate and apply labware offsets:

> 1. Create a “dummy” protocol that loads your labware and has each used pipette pick up a tip from a tip rack.
> 2. Import the dummy protocol to the Opentrons App.
> 3. Run Labware Position Check from the app or touchscreen.
> 4. Add the offsets to your code with [`set_offset()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.set_offset).

Creating the dummy protocol requires you to:

> 1. Use the `metadata` or `requirements` dictionary to specify the API version. (See [Versioning](https://docs.opentrons.com/v2/versioning.html#v2-versioning) for details.) Use the same API version as you did in [`opentrons.execute.get_protocol_api()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.execute.get_protocol_api).
> 2. Define a `run()` function.
> 3. Load all of your labware in their initial locations.
> 4. Load your smallest capacity pipette and specify its `tip_racks`.
> 5. Call `pick_up_tip()`. Labware Position Check can’t run if you don’t pick up a tip.

For example, the following dummy protocol will use a P300 Single-Channel GEN2 pipette to enable Labware Position Check for an OT-2 tip rack, NEST reservoir, and NEST flat well plate.

```python
metadata = {"apiLevel": "2.13"}

 def run(protocol):
     tiprack = protocol.load_labware("opentrons_96_tiprack_300ul", 1)
     reservoir = protocol.load_labware("nest_12_reservoir_15ml", 2)
     plate = protocol.load_labware("nest_96_wellplate_200ul_flat", 3)
     p300 = protocol.load_instrument("p300_single_gen2", "left", tip_racks=[tiprack])
     p300.pick_up_tip()
     p300.return_tip()
```

After importing this protocol to the Opentrons App, run Labware Position Check to get the x, y, and z offsets for the tip rack and labware. When complete, you can click **Get Labware Offset Data** to view automatically generated code that uses [`set_offset()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.set_offset) to apply the offsets to each piece of labware.

```python
labware_1 = protocol.load_labware("opentrons_96_tiprack_300ul", location="1")
labware_1.set_offset(x=0.00, y=0.00, z=0.00)

labware_2 = protocol.load_labware("nest_12_reservoir_15ml", location="2")
labware_2.set_offset(x=0.10, y=0.20, z=0.30)

labware_3 = protocol.load_labware("nest_96_wellplate_200ul_flat", location="3")
labware_3.set_offset(x=0.10, y=0.20, z=0.30)
```

This automatically generated code uses generic names for the loaded labware. If you want to match the labware names already in your protocol, change the labware names to match your original code:

```python
reservoir = protocol.load_labware("nest_12_reservoir_15ml", "2")
reservoir.set_offset(x=0.10, y=0.20, z=0.30)
```

*New in version 2.12.*

Once you’ve executed this code in Jupyter Notebook, all subsequent positional calculations for this reservoir in slot 2 will be adjusted 0.1 mm to the right, 0.2 mm to the back, and 0.3 mm up.

Remember, you should only add `set_offset()` commands to protocols run outside of the Opentrons App. And you should follow the behavior of Labware Position Check, i.e., *do not* reuse offset measurements unless they apply to the *same labware* in the *same deck slot* on the *same robot*.



> **Warning:**
>
> 
>
> Improperly reusing offset data may cause your robot to move to an unexpected position or crash against labware, which can lead to incorrect protocol execution or damage your equipment. The same applies when running protocols with `set_offset()` commands in the Opentrons App. When in doubt: run Labware Position Check again and update your code!



