
Use the `load_labware()` method on the module context to load labware on a module. For example, to load the [Opentrons 24 Well Aluminum Block](https://labware.opentrons.com/opentrons_24_aluminumblock_generic_2ml_screwcap?category=aluminumBlock) on top of a Temperature Module:

```python
def run(protocol: protocol_api.ProtocolContext):
    temp_mod = protocol.load_module(
      module_name="temperature module gen2",
      location="D1")
    temp_labware = temp_mod.load_labware(
        name="opentrons_24_aluminumblock_generic_2ml_screwcap",
        label="Temperature-Controlled Tubes")
```

*New in version 2.0.*

When you load labware on a module, you don’t need to specify the deck slot. In the above example, the `load_module()` method already specifies where the module is on the deck: `location= "D1"`.

Any [custom labware](https://docs.opentrons.com/v2/new_labware.html#v2-custom-labware) added to your Opentrons App is also accessible when loading labware onto a module. You can find and copy its load name by going to its card on the Labware page.

*New in version 2.1.*


Module and Labware Compatibility

It’s your responsibility to ensure the labware and module combinations you load together work together. The Protocol API won’t raise a warning or error if you load an unusual combination, like placing a tube rack on a Thermocycler. See [What labware can I use with my modules?](https://support.opentrons.com/s/article/What-labware-can-I-use-with-my-modules) for more information about labware/module combinations.


Additional Labware Parameters

In addition to the mandatory `load_name` argument, you can also specify additional parameters. For example, if you specify a `label`, this name will appear in the Opentrons App and the run log instead of the load name. For labware that has multiple definitions, you can specify `version` and `namespace` (though most of the time you won’t have to). The [`load_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware) methods of all module contexts accept these additional parameters.