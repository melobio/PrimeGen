
You must specify the API version you are targeting in your Python protocol. In all minor versions, you can do this with the `apiLevel` key in the `metadata` dictionary, alongside any other metadata elements:

```python
 from opentrons import protocol_api

 metadata = {
     'apiLevel': '2.16',
     'author': 'A. Biologist'}

 def run(protocol: protocol_api.ProtocolContext):
     protocol.comment('Hello, world!')
```

From version 2.15 onward, you can specify `apiLevel` in the `requirements` dictionary instead:

```python
 from opentrons import protocol_api

 metadata = {'author': 'A. Biologist'}
 requirements = {'apiLevel': '2.16', 'robotType': 'Flex'}

 def run(protocol: protocol_api.ProtocolContext):
     protocol.comment('Hello, Flex!')
```

Choose only one of these places to specify `apiLevel`. If you put it in neither or both places, you will not be able to simulate or run your protocol.

The version you specify determines the features and behaviors available to your protocol. For example, support for the Heater-Shaker Module was added in version 2.13, so you can’t specify a lower version and then call `HeaterShakerContext` methods without causing an error. This protects you from accidentally using features not present in your specified API version, and keeps your protocol portable between API versions.

When choosing an API level, consider what features you need and how widely you plan to share your protocol. Throughout the Python Protocol API documentation, there are version statements indicating when elements (features, function calls, available properties, etc.) were introduced. Keep these in mind when specifying your protocol’s API version. Version statements look like this:

*New in version 2.0.*

On the one hand, using the highest available version will give your protocol access to all the latest [features and fixes](https://docs.opentrons.com/v2/versioning.html#version-notes). On the other hand, using the lowest possible version lets the protocol work on a wider range of robot software versions. For example, a protocol that uses the Heater-Shaker and specifies version 2.13 of the API should work equally well on a robot running version 6.1.0 or 6.2.0 of the robot software. Specifying version 2.14 would limit the protocol to robots running 6.2.0 or higher.

