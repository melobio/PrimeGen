
The API treats heating and shaking as separate, independent activities due to the amount of time they take.

Increasing or reducing shaking speed takes a few seconds, so the API treats these actions as *blocking* commands. All other commands cannot run until the module reaches the required speed.

Heating the module, or letting it passively cool, takes more time than changing the shaking speed. As a result, the API gives you the flexibility to perform other pipetting actions while waiting for the module to reach a target temperature. When holding at temperature, you can design your protocol to run in a blocking or non-blocking manner.

> Note
>
> Since API version 2.13, only the Heater-Shaker Module supports non-blocking command execution. All other modules’ methods are blocking commands.


Blocking commands

This example uses a blocking command and shakes a sample for one minute. No other commands will execute until a minute has elapsed. The three commands in this example start the shake, wait for one minute, and then stop the shake:

```python
hs_mod.set_and_wait_for_shake_speed(500)
protocol.delay(minutes=1)
hs_mod.deactivate_shaker()
```

These actions will take about 65 seconds total. Compare this with similar-looking commands for holding a sample at a temperature for one minute:

```python
hs_mod.set_and_wait_for_temperature(75)
protocol.delay(minutes=1)
hs_mod.deactivate_heater()
```

This may take much longer, depending on the thermal block used, the volume and type of liquid contained in the labware, and the initial temperature of the module.


Non-blocking commands

To pipette while the Heater-Shaker is heating, use [`set_target_temperature()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.HeaterShakerContext.set_target_temperature) and [`wait_for_temperature()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.HeaterShakerContext.wait_for_temperature) instead of [`set_and_wait_for_temperature()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.HeaterShakerContext.set_and_wait_for_temperature):

```python
hs_mod.set_target_temperature(75)
pipette.pick_up_tip()
pipette.aspirate(50, plate['A1'])
pipette.dispense(50, plate['B1'])
pipette.drop_tip()
hs_mod.wait_for_temperature()
protocol.delay(minutes=1)
hs_mod.deactivate_heater()
```

This example would likely take just as long as the blocking version above; it’s unlikely that one aspirate and one dispense action would take longer than the time for the module to heat. However, be careful when putting a lot of commands between a `set_target_temperature()` call and a `delay()` call. In this situation, you’re relying on `wait_for_temperature()` to resume execution of commands once heating is complete. But if the temperature has already been reached, the delay will begin later than expected and the Heater-Shaker will hold at its target temperature longer than intended.

Additionally, if you want to pipette while the module holds a temperature for a certain length of time, you need to track the holding time yourself. One of the simplest ways to do this is with Python’s `time` module. First, add `import time` at the start of your protocol. Then, use [`time.monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic) to set a reference time when the target is reached. Finally, add a delay that calculates how much holding time is remaining after the pipetting actions:

```python
hs_mod.set_and_wait_for_temperature(75)
start_time = time.monotonic()  # set reference time
pipette.pick_up_tip()
pipette.aspirate(50, plate['A1'])
pipette.dispense(50, plate['B1'])
pipette.drop_tip()
# delay for the difference between now and 60 seconds after the reference time
protocol.delay(max(0, start_time+60 - time.monotonic()))
hs_mod.deactivate_heater()
```

Provided that the parallel pipetting actions don’t take more than one minute, this code will deactivate the heater one minute after its target was reached. If more than one minute has elapsed, the value passed to `protocol.delay()` will equal 0, and the protocol will continue immediately.

