
*class* opentrons.protocol_api.**ProtocolContext**(*api_version: APIVersion*, *core: AbstractProtocol[AbstractInstrument[AbstractWellCore], AbstractLabware[AbstractWellCore], AbstractModuleCore]*, *broker: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[LegacyBroker] = None*, *core_map: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[LoadedCoreMap] = None*, *deck: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[Deck] = None*, *bundled_data: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[[Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[str](https://docs.python.org/3/library/stdtypes.html#str), [bytes](https://docs.python.org/3/library/stdtypes.html#bytes)]] = None*)

The Context class is a container for the state of a protocol.

It encapsulates many of the methods formerly found in the Robot class, including labware, instrument, and module loading, as well as core functions like pause and resume.

Unlike the old robot class, it is designed to be ephemeral. The lifetime of a particular instance should be about the same as the lifetime of a protocol. The only exception is the one stored in `.legacy_api.api.robot`, which is provided only for back compatibility and should be used less and less as time goes by.

*New in version 2.0.*



*property* **api_version***: APIVersion

Return the API version supported by this protocol context.

The supported API version was specified when the protocol context was initialized. It may be lower than the highest version supported by the robot software. For the highest version supported by the robot software, see `protocol_api.MAX_SUPPORTED_VERSION`.

*New in version 2.0.*



*property* **bundled_data***: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[str](https://docs.python.org/3/library/stdtypes.html#str), [bytes](https://docs.python.org/3/library/stdtypes.html#bytes)]

Accessor for data files bundled with this protocol, if any.

This is a dictionary mapping the filenames of bundled datafiles, with extensions but without paths (e.g. if a file is stored in the bundle as `data/mydata/aspirations.csv` it will be in the dict as `'aspirations.csv'`) to the bytes contents of the files.

*New in version 2.0.*



**commands**(*self*) → 'List[str]'

Return the run log.

This is a list of human-readable strings representing what’s been done in the protocol so far. For example, “Aspirating 123 µL from well A1 of 96 well plate in slot 1.”

The exact format of these entries is not guaranteed. The format here may differ from other places that show the run log, such as the Opentrons App.

*New in version 2.0.*



**comment**(*self*, *msg: 'str'*) → 'None'

Add a user-readable comment string that will be echoed to the Opentrons app.

The value of the message is computed during protocol simulation, so cannot be used to communicate real-time information from the robot’s actual run.

*New in version 2.0.*



*property* **deck**: Deck

​	An interface to provide information about what’s currently loaded on the deck. This object is useful for determining if a slot in the deck is free.

This object behaves like a dictionary whose keys are the deck slot names. For instance, `protocol.deck[1]`, `protocol.deck["1"]`, and `protocol.deck["D1"]` will all return the object loaded in the front-left slot. (See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).)

The value will be a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) if the slot contains a labware, a `ModuleContext` if the slot contains a hardware module, or `None` if the slot doesn’t contain anything.

Rather than filtering the objects in the deck map yourself, you can also use [`loaded_labwares`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.loaded_labwares) to get a dict of labwares and [`loaded_modules`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.loaded_modules) to get a dict of modules.

For [Advanced Control](https://docs.opentrons.com/v2/new_advanced_running.html#advanced-control) *only*, you can delete an element of the `deck` dict. This only works for deck slots that contain labware objects. For example, if slot 1 contains a labware, `del protocol.deck['1']` will free the slot so you can load another labware there.



> **Warning:**
>
> 
>
> Deleting labware from a deck slot does not pause the protocol. Subsequent commands continue immediately. If you need to physically move the labware to reflect the new deck state, add a [`pause()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.pause) or use [`move_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.move_labware) instead.

*Changed in version 2.15:* `del` sets the corresponding labware’s location to `OFF_DECK`.



*New in version 2.0.*

**define_liquid**(*self*, *name: 'str'*, *description: 'Optional[str]'*, *display_color: 'Optional[str]'*) → 'Liquid'[¶](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.define_liquid)

Define a liquid within a protocol.

Parameters:

- **name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – A human-readable name for the liquid.
- **description** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional description of the liquid.
- **display_color** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional hex color code, with hash included, to represent the specified liquid. Standard three-value, four-value, six-value, and eight-value syntax are all acceptable.

Returns：A [`Liquid`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Liquid) object representing the specified liquid.



*New in version 2.14.*

**delay**(*self*, *seconds: 'float' = 0*, *minutes: 'float' = 0*, *msg: 'Optional[str]' = None*) → 'None'

Delay protocol execution for a specific amount of time.

- Parameters:

  **seconds** ([*float*](https://docs.python.org/3/library/functions.html#float)) – A time to delay in seconds**minutes** ([*float*](https://docs.python.org/3/library/functions.html#float)) – A time to delay in minutes

If both seconds and minutes are specified, they will be added.



*New in version 2.0.*

*property* **door_closed***: [bool](https://docs.python.org/3/library/functions.html#bool)

Returns True if the robot door is closed



*New in version 2.5.*

*property* **fixed_trash***: [Union](https://docs.python.org/3/library/typing.html#typing.Union)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), TrashBin]*

The trash fixed to slot 12 of an OT-2’s deck.

In API version 2.15 and earlier, the fixed trash is a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) object with one well. Access it like labware in your protocol. For example, `protocol.fixed_trash['A1']`

In API version 2.15 only, Flex protocols have a fixed trash in slot A3.

In API version 2.16 and later, the fixed trash only exists in OT-2 protocols. It is a `TrashBin` object, which doesn’t have any wells. Trying to access `fixed_trash` in a Flex protocol will raise an error. See [Trash Bin](https://docs.opentrons.com/v2/deck_slots.html#configure-trash-bin) for details on using the movable trash in Flex protocols.

*Changed in version 2.16:* Returns a `TrashBin` object.



*New in version 2.0.*

**home**(*self*) → 'None'

Homes the robot.



*New in version 2.0.*

**is_simulating**(*self*) → 'bool'



*New in version 2.0.*

**load_adapter**(*self*, *load_name: 'str'*, *location: 'Union[DeckLocation, OffDeckType]'*, *namespace: 'Optional[str]' = None*, *version: 'Optional[int]' = None*) → 'Labware'

Load an adapter onto a location.

For adapters already defined by Opentrons, this is a convenient way to collapse the two stages of adapter initialization (creating the adapter and adding it to the protocol) into one.

This function returns the created and initialized adapter for use later in the protocol.

Parameters:

- **load_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – A string to use for looking up a labware definition for the adapter. You can find the `load_name` for any standard adapter on the Opentrons [Labware Library](https://labware.opentrons.com/).

- **location** (int or str or [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK)) – Either a [deck slot](https://docs.opentrons.com/v2/deck_slots.html#deck-slots), like `1`, `"1"`, or `"D1"`, or the special value [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK).

- **namespace** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) –

  The namespace that the labware definition belongs to. If unspecified, will search both:

  * `"opentrons"`, to load standard Opentrons labware definitions.
  * `"custom_beta"`, to load custom labware definitions created with the [Custom Labware Creator](https://labware.opentrons.com/create).

  You might need to specify an explicit `namespace` if you have a custom definition whose `load_name` is the same as an Opentrons standard definition, and you want to explicitly choose one or the other.

- **version** – The version of the labware definition. You should normally leave this unspecified to let the implementation choose a good default.



*New in version 2.15.*

**load_adapter_from_definition**(*self*, *adapter_def: "'LabwareDefinition'"*, *location: 'Union[DeckLocation, OffDeckType]'*) → 'Labware'

Specify the presence of an adapter on the deck.

This function loads the adapter definition specified by `adapter_def` to the location specified by `location`.

**Parameters**:

* **
  adapter_def** – The adapter’s labware definition.

  **location** (int or str or [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK)) – The slot into which to load the labware, such as `1`, `"1"`, or `"D1"`. See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).



*New in version 2.15.*

**load_instrument**(*self*, *instrument_name: 'str'*, *mount: 'Union[Mount, str, None]' = None*, *tip_racks: 'Optional[List[Labware]]' = None*, *replace: 'bool' = False*) → 'InstrumentContext'



Load a specific instrument required by the protocol.

This value will actually be checked when the protocol runs, to ensure that the correct instrument is attached in the specified location.

Parameters:

- **instrument_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – Which instrument you want to load. See [API Load Names](https://docs.opentrons.com/v2/pipettes/loading.html#new-pipette-models) for the valid values.
- **mount** (types.Mount or str or `None`) – The mount where this instrument should be attached. This can either be an instance of the enum type [`types.Mount`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Mount) or one of the strings `"left"` or `"right"`. If you’re loading a Flex 96-Channel Pipette (`instrument_name="flex_96channel_1000"`), you can leave this unspecified, since it always occupies both mounts; if you do specify a value, it will be ignored.
- **tip_racks** (List[[`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]) – A list of tip racks from which to pick tips if [`InstrumentContext.pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip) is called without arguments.
- **replace** ([*bool*](https://docs.python.org/3/library/functions.html#bool)) – Indicate that the currently-loaded instrument in mount (if such an instrument exists) should be replaced by instrument_name.



*New in version 2.0.*

**load_labware**(*self*, *load_name: 'str'*, *location: 'Union[DeckLocation, OffDeckType]'*, *label: 'Optional[str]' = None*, *namespace: 'Optional[str]' = None*, *version: 'Optional[int]' = None*, *adapter: 'Optional[str]' = None*) → 'Labware'

Load a labware onto a location.

For labware already defined by Opentrons, this is a convenient way to collapse the two stages of labware initialization (creating the labware and adding it to the protocol) into one.

This function returns the created and initialized labware for use later in the protocol.

Parameters:

- **load_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) –

  A string to use for looking up a labware definition. You can find the `load_name` for any standard labware on the Opentrons [Labware Library](https://labware.opentrons.com/).

  

- **location** (int or str or [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK)) –

  Either a [deck slot](https://docs.opentrons.com/v2/deck_slots.html#deck-slots), like `1`, `"1"`, or `"D1"`, or the special value [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK).

  *Changed in version 2.15:* You can now specify a deck slot as a coordinate, like `"D1"`.

  

- **label** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional special name to give the labware. If specified, this is the name the labware will appear as in the run log and the calibration view in the Opentrons app.

- **namespace** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) –

  The namespace that the labware definition belongs to. If unspecified, will search both:

  - `"opentrons"`, to load standard Opentrons labware definitions.
  - `"custom_beta"`, to load custom labware definitions created with the [Custom Labware Creator](https://labware.opentrons.com/create).

  You might need to specify an explicit `namespace` if you have a custom definition whose `load_name` is the same as an Opentrons standard definition, and you want to explicitly choose one or the other.

  

- **version** – The version of the labware definition. You should normally leave this unspecified to let the implementation choose a good default.

- **adapter** – Load name of an adapter to load the labware on top of. The adapter will be loaded from the same given namespace, but version will be automatically chosen.



*New in version 2.0.*

**load_labware_by_name**(*self*, *load_name: 'str'*, *location: 'DeckLocation'*, *label: 'Optional[str]' = None*, *namespace: 'Optional[str]' = None*, *version: 'int' = 1*) → 'Labware'

*Deprecated since version 2.0:* Use [`load_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware) instead.

*New in version 2.0.*

**load_labware_from_definition**(*self*, *labware_def: "'LabwareDefinition'"*, *location: 'Union[DeckLocation, OffDeckType]'*, *label: 'Optional[str]' = None*) → 'Labware'[¶](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware_from_definition)

Specify the presence of a piece of labware on the OT2 deck.

This function loads the labware definition specified by labware_def to the location specified by location.

Parameters:

- **labware_def** – The labware definition to load
- **location** (int or str or [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK)) – The slot into which to load the labware, such as `1`, `"1"`, or `"D1"`. See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).
- **label** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional special name to give the labware. If specified, this is the name the labware will appear as in the run log and the calibration view in the Opentrons app.

*New in version 2.0.*



**load_module**(*self*, *module_name: 'str'*, *location: 'Optional[DeckLocation]' = None*, *configuration: 'Optional[str]' = None*) → 'ModuleTypes'

Load a module onto the deck, given its name or model.

This is the function to call to use a module in your protocol, like [`load_instrument()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_instrument) is the method to call to use an instrument in your protocol. It returns the created and initialized module context, which will be a different class depending on the kind of module loaded.

A map of deck positions to loaded modules can be accessed later by using [`loaded_modules`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.loaded_modules).

- Parameters:

  **module_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – The name or model of the module. See [Available Modules](https://docs.opentrons.com/v2/modules/setup.html#available-modules) for possible values.**location** ([*str*](https://docs.python.org/3/library/stdtypes.html#str) *or* [*int*](https://docs.python.org/3/library/functions.html#int) *or* *None*) –The location of the module.This is usually the name or number of the slot on the deck where you will be placing the module, like `1`, `"1"`, or `"D1"`. See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).The Thermocycler is only valid in one deck location. You don’t have to specify a location when loading it, but if you do, it must be `7`, `"7"`, or `"B1"`. See [Thermocycler Module](https://docs.opentrons.com/v2/modules/thermocycler.html#thermocycler-module).*Changed in version 2.15:* You can now specify a deck slot as a coordinate, like `"D1"`.**configuration** –Configure a thermocycler to be in the `semi` position. This parameter does not work. Do not use it.*Changed in version 2.14:* This parameter dangerously modified the protocol’s geometry system, and it didn’t function properly, so it was removed.

- Returns:

  The loaded and initialized module—a [`HeaterShakerContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.HeaterShakerContext), [`MagneticBlockContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticBlockContext), [`MagneticModuleContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticModuleContext), [`TemperatureModuleContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.TemperatureModuleContext), or [`ThermocyclerContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ThermocyclerContext), depending on what you requested with `module_name`.*Changed in version 2.13:* Added `HeaterShakerContext` return value.*Changed in version 2.15:* Added `MagneticBlockContext` return value.

*New in version 2.0.*



**load_trash_bin**(*self*, *location: 'DeckLocation'*) → 'TrashBin'

Load a trash bin on the deck of a Flex.

See [Trash Bin](https://docs.opentrons.com/v2/deck_slots.html#configure-trash-bin) for details.

If you try to load a trash bin on an OT-2, the API will raise an error.



Parameters:

**location** –The [deck slot](https://docs.opentrons.com/v2/deck_slots.html#deck-slots) where the trash bin is. The location can be any unoccupied slot in column 1 or 3.

If you try to load a trash bin in column 2 or 4, the API will raise an error.

*New in version 2.16.*



**load_waste_chute**(*self*) → 'WasteChute'

Load the waste chute on the deck.

See [Waste Chute](https://docs.opentrons.com/v2/deck_slots.html#configure-waste-chute) for details, including the deck configuration variants of the waste chute.

The deck plate adapter for the waste chute can only go in slot D3. If you try to load another item in slot D3 after loading the waste chute, or vice versa, the API will raise an error.



*New in version 2.16.*



*property* **loaded_instruments***: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[str](https://docs.python.org/3/library/stdtypes.html#str), [InstrumentContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext)]*

Get the instruments that have been loaded into the protocol.

This is a map of mount name to instruments previously loaded with [`load_instrument()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_instrument). It is not necessarily the same as the instruments attached to the robot - for instance, if the robot has an instrument in both mounts but your protocol has only loaded one of them with [`load_instrument()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_instrument), the unused one will not be present.



Returns:

A dict mapping mount name (`'left'` or `'right'`) to the instrument in that mount. If a mount has no loaded instrument, that key will be missing from the dict.

*New in version 2.0.*



*property* **loaded_labwares***: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[int](https://docs.python.org/3/library/functions.html#int), [Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]*

Get the labwares that have been loaded into the protocol context.

Slots with nothing in them will not be present in the return value.

> **Note:**
>
> 
>
> If a module is present on the deck but no labware has been loaded into it with `module.load_labware()`, there will be no entry for that slot in this value. That means you should not use `loaded_labwares` to determine if a slot is available or not, only to get a list of labwares. If you want a data structure of all objects on the deck regardless of type, see [`deck`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.deck).

- Returns:

  Dict mapping deck slot number to labware, sorted in order of the locations.

*New in version 2.0.*



*property* **loaded_modules***: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[int](https://docs.python.org/3/library/functions.html#int), [Union](https://docs.python.org/3/library/typing.html#typing.Union)[[TemperatureModuleContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.TemperatureModuleContext), [MagneticModuleContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticModuleContext), [ThermocyclerContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ThermocyclerContext), [HeaterShakerContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.HeaterShakerContext), [MagneticBlockContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticBlockContext)]]

*[MagneticBlockContext](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticBlockContext)]]*

Get the modules loaded into the protocol context.

This is a map of deck positions to modules loaded by previous calls to [`load_module()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_module). It is not necessarily the same as the modules attached to the robot - for instance, if the robot has a Magnetic Module and a Temperature Module attached, but the protocol has only loaded the Temperature Module with [`load_module()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_module), only the Temperature Module will be present.

Returns Dict[int, ModuleContext]:Dict mapping slot name to module contexts. The elements may not be ordered by slot number.

*New in version 2.0.*



*property* **max_speeds**: AxisMaxSpeeds

Per-axis speed limits when moving this instrument.

Changing this value changes the speed limit for each non-plunger axis of the robot, when moving this pipette. Note that this does only sets a limit on how fast movements can be; movements can still be slower than this. However, it is useful if you require the robot to move much more slowly than normal when using this pipette.

This is a dictionary mapping string names of axes to float values limiting speeds. To change a speed, set that axis’s value. To reset an axis’s speed to default, delete the entry for that axis or assign it to `None`.

For instance,

```python
def run(protocol):
    protocol.comment(str(right.max_speeds))  # '{}' - all default
    protocol.max_speeds['A'] = 10  # limit max speed of
                                   # right pipette Z to 10mm/s
    del protocol.max_speeds['A']  # reset to default
    protocol.max_speeds['X'] = 10  # limit max speed of x to
                                   # 10 mm/s
    protocol.max_speeds['X'] = None  # reset to default
```

> **Caution:**
>
> 
>
> This property is not yet supported on [API version](https://docs.opentrons.com/v2/versioning.html#v2-versioning) 2.14 or higher.



**move_labware**(*self*, *labware: 'Labware'*, *new_location: 'Union[DeckLocation, Labware, ModuleTypes, OffDeckType, WasteChute]'*, *use_gripper: 'bool' = False*, *pick_up_offset: 'Optional[Mapping[str, float]]' = None*, *drop_offset: 'Optional[Mapping[str, float]]' = None*) → 'None'

Move a loaded labware to a new location. See [Moving Labware](https://docs.opentrons.com/v2/moving_labware.html#moving-labware) for more details.



Parameters:

- **labware** – The labware to move. It should be a labware already loaded using [`load_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware).

- **new_location** –

  Where to move the labware to. This is either:

  - A deck slot like `1`, `"1"`, or `"D1"`. See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).
  - A hardware module that’s already been loaded on the deck with [`load_module()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_module).
  - A labware or adapter that’s already been loaded on the deck with [`load_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware) or [`load_adapter()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_adapter).
  - The special constant [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK).

  

- **use_gripper** –

  Whether to use the Flex Gripper for this movement.

  - If `True`, will use the gripper to perform an automatic movement. This will raise an error on an OT-2 protocol.
  - If `False`, will pause protocol execution until the user performs the movement. Protocol execution remains paused until the user presses **Confirm and resume**.

Gripper-only parameters:

Parameters:

- **pick_up_offset** – Optional x, y, z vector offset to use when picking up labware.
- **drop_offset** – Optional x, y, z vector offset to use when dropping off labware.

Before moving a labware to or from a hardware module, make sure that the labware’s current and new locations are accessible, i.e., open the Thermocycler lid or open the Heater-Shaker’s labware latch.

*New in version 2.15.*



**pause**(*self*, *msg: 'Optional[str]' = None*) → 'None'

Pause execution of the protocol until it’s resumed.

A human can resume the protocol through the Opentrons App.

This function returns immediately, but the next function call that is blocked by a paused robot (anything that involves moving) will not return until the protocol is resumed.

- Parameters:

  **msg** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional message to show to connected clients. The Opentrons App will show this in the run log.

*New in version 2.0.*



*property* **rail_lights_on***: [bool](https://docs.python.org/3/library/functions.html#bool)*

Returns True if the rail lights are on

*New in version 2.5.*

**resume**(*self*) → 'None'

Resume the protocol after [`pause()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.pause).*Deprecated since version 2.12:* The Python Protocol API supports no safe way for a protocol to resume itself. See https://github.com/Opentrons/opentrons/issues/8209. If you’re looking for a way for your protocol to resume automatically after a period of time, use [`delay()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.delay).

*New in version 2.0.*



**set_rail_lights**(*self*, *on: 'bool'*) → 'None'

Controls the robot rail lights

- Parameters:

  **on** ([*bool*](https://docs.python.org/3/library/functions.html#bool)) – If true, turn on rail lights; otherwise, turn off.

*New in version 2.5.*



