

Well Ordering

You need to select which wells to transfer liquids to and from over the course of a protocol.

Rows of wells on a labware have labels that are capital letters starting with A. For instance, an 96-well plate has 8 rows, labeled `'A'` through `'H'`.

Columns of wells on a labware have labels that are numbers starting with 1. For instance, a 96-well plate has columns `'1'` through `'12'`.

All well-accessing functions start with the well at the top left corner of the labware. The ending well is in the bottom right. The order of travel from top left to bottom right depends on which function you use.

![_images/Well_Iteration.png](4.Labware.assets/Well_Iteration.png)

The code in this section assumes that `plate` is a 24-well plate. For example:

```
plate = protocol.load_labware('corning_24_wellplate_3.4ml_flat', location='D1')
```




Accessor Methods

The API provides many different ways to access wells inside labware. Different methods are useful in different contexts. The table below lists out the methods available to access wells and their differences.

| Method                                                       | Returns                               | Example                                                      |
| :----------------------------------------------------------- | :------------------------------------ | :----------------------------------------------------------- |
| [`Labware.wells()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells) | List of all wells.                    | `[labware:A1, labware:B1, labware:C1...]`                    |
| [`Labware.rows()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows) | List of lists grouped by row.         | `[[labware:A1, labware:A2...], [labware:B1, labware:B2...]]` |
| [`Labware.columns()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns) | List of lists grouped by column.      | `[[labware:A1, labware:B1...], [labware:A2, labware:B2...]]` |
| [`Labware.wells_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells_by_name) | Dictionary with well names as keys.   | `{'A1': labware:A1, 'B1': labware:B1}`                       |
| [`Labware.rows_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows_by_name) | Dictionary with row names as keys.    | `{'A': [labware:A1, labware:A2...], 'B': [labware:B1, labware:B2...]}` |
| [`Labware.columns_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns_by_name) | Dictionary with column names as keys. | `{'1': [labware:A1, labware:B1...], '2': [labware:A2, labware:B2...]}` |


Accessing Individual Wells


The simplest way to refer to a single well is by its name, like A1 or D6. [`Labware.wells_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells_by_name) accomplishes this. This is such a common task that the API also has an equivalent shortcut: dictionary indexing.

```python
a1 = plate.wells_by_name()['A1']
d6 = plate['D6']  # dictionary indexing
```

If a well does not exist in the labware, such as `plate['H12']` on a 24-well plate, the API will raise a `KeyError`. In contrast, it would be a valid reference on a standard 96-well plate.

*New in version 2.0.*


In addition to referencing wells by name, you can also reference them with zero-indexing. The first well in a labware is at position 0.

```python
plate.wells()[0]   # well A1
plate.wells()[23]  # well D6
```

Tip

You may find coordinate well names like `"B3"` easier to reason with, especially when working with irregular labware, e.g. `opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical` (see the [Opentrons 10 Tube Rack](https://labware.opentrons.com/opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical) in the Labware Library). Whichever well access method you use, your protocol will be most maintainable if you use only one access method consistently.

*New in version 2.0.*


Accessing Groups of Wells

When handling liquid, you can provide a group of wells as the source or destination. Alternatively, you can take a group of wells and loop (or iterate) through them, with each liquid-handling command inside the loop accessing the loop index.

Use [`Labware.rows_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows_by_name) to access a specific row of wells or [`Labware.columns_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns_by_name) to access a specific column of wells on a labware. These methods both return a dictionary with the row or column name as the keys:

```python
row_dict = plate.rows_by_name()['A']
row_list = plate.rows()[0]  # equivalent to the line above
column_dict = plate.columns_by_name()['1']
column_list = plate.columns()[0]  # equivalent to the line above

print('Column "1" has', len(column_dict), 'wells')  # Column "1" has 4 wells
print('Row "A" has', len(row_dict), 'wells')  # Row "A" has 6 wells
```

Since these methods return either lists or dictionaries, you can iterate through them as you would regular Python data structures.

For example, to transfer 50 ÂµL of liquid from the first well of a reservoir to each of the wells of row `'A'` on a plate:

```python
for well in plate.rows()[0]:
    pipette.transfer(reservoir['A1'], well, 50)
```

Equivalently, using `rows_by_name`:

```python
for well in plate.rows_by_name()['A'].values():python
    pipette.transfer(reservoir['A1'], well, 50)
```

*New in version 2.0.*



