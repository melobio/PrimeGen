
Throughout this section, we’ll use the labware listed in the following table.

| Labware type  | Labware name                                                 | API load name                     |
| :------------ | :----------------------------------------------------------- | :-------------------------------- |
| Well plate    | [Corning 96 Well Plate 360 µL Flat](https://labware.opentrons.com/corning_96_wellplate_360ul_flat/) | `corning_96_wellplate_360ul_flat` |
| Flex tip rack | [Opentrons Flex 96 Tips 200 µL](https://shop.opentrons.com/opentrons-flex-tips-200-l/) | `opentrons_flex_96_tiprack_200ul` |
| OT-2 tip rack | [Opentrons 96 Tip Rack 300 µL](https://labware.opentrons.com/opentrons_96_tiprack_300ul) | `opentrons_96_tiprack_300ul`      |

Similar to the code sample in [How the API Works](https://docs.opentrons.com/v2/index.html#overview-section-v2), here’s how you use the [`ProtocolContext.load_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware) method to load labware on either Flex or OT-2.

```python
#Flex
tiprack = protocol.load_labware('opentrons_flex_96_tiprack_200ul', 'D1')
plate = protocol.load_labware('corning_96_wellplate_360ul_flat', 'D2')
#OT-2
tiprack = protocol.load_labware('opentrons_96_tiprack_300ul', '1')
plate = protocol.load_labware('corning_96_wellplate_360ul_flat', '2')
```

*New in version 2.0.*

When the `load_labware` method loads labware into your protocol, it returns a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) object.

Tip

The `load_labware` method includes an optional `label` argument. You can use it to identify labware with a descriptive name. If used, the label value is displayed in the Opentrons App. For example:

```python
tiprack = protocol.load_labware(
    load_name='corning_96_wellplate_360ul_flat',
    location='D1',
    label='any-name-you-want')
```




Loading Labware on Adapters

The previous section demonstrates loading labware directly into a deck slot. But you can also load labware on top of an adapter that either fits on a module or goes directly on the deck. The ability to combine labware with adapters adds functionality and flexibility to your robot and protocols.

You can either load the adapter first and the labware second, or load both the adapter and labware all at once.


The `load_adapter()` method is available on `ProtocolContext` and module contexts. It behaves similarly to `load_labware()`, requiring the load name and location for the desired adapter. Load a module, adapter, and labware with separate calls to specify each layer of the physical stack of components individually:

```python
hs_mod = protocol.load_module('heaterShakerModuleV1', 'D1')
hs_adapter = hs_mod.load_adapter('opentrons_96_flat_bottom_adapter')
hs_plate = hs_adapter.load_labware('nest_96_wellplate_200ul_flat')
```

*New in version 2.15:* The `load_adapter()` method.


Use the `adapter` argument of `load_labware()` to load an adapter at the same time as labware. For example, to load the same 96-well plate and adapter from the previous section at once:

```python
hs_plate = hs_mod.load_labware(
    name='nest_96_wellplate_200ul_flat',
    adapter='opentrons_96_flat_bottom_adapter'
)
```

*New in version 2.15:* The `adapter` parameter.

The API also has some “combination” labware definitions, which treat the adapter and labware as a unit:

```python
hs_combo = hs_mod.load_labware(
    'opentrons_96_flat_bottom_adapter_nest_wellplate_200ul_flat'
)
```

Loading labware this way prevents you from [moving the labware](https://docs.opentrons.com/v2/moving_labware.html#moving-labware) onto or off of the adapter, so it’s less flexible than loading the two separately. Avoid using combination definitions unless your protocol specifies an `apiLevel` of 2.14 or lower.



