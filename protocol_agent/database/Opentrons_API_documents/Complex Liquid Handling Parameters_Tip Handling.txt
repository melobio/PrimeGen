
The `new_tip` parameter controls if and when complex commands pick up new tips from the pipette’s tip racks. It has three possible values:

| Value      | Behavior                                                     |
| :--------- | :----------------------------------------------------------- |
| `"once"`   | Pick up a tip at the start of the command.Use the tip for all liquid handling.Drop the tip at the end of the command. |
| `"always"` | Pick up and drop a tip for each set of aspirate and dispense steps. |
| `"never"`  | Do not pick up or drop tips at all.                          |

`"once"` is the default behavior for all complex commands.

*New in version 2.0.*


Tip Handling Requirements

`"once"` and `"always"` require that the pipette has an [associated tip rack](https://docs.opentrons.com/v2/pipettes/loading.html#pipette-tip-racks), or the API will raise an error (because it doesn’t know where to pick up a tip from). If the pipette already has a tip attached, the API will also raise an error when it tries to pick up a tip.

```python
pipette.pick_up_tip()
pipette.transfer(
    volume=100,
    source=plate["A1"],
    dest=[plate["B1"], plate["B2"], plate["B3"]],
    new_tip="never",  # "once", "always", or None will error
)
```

Conversely, `"never"` requires that the pipette has picked up a tip, or the API will raise an error (because it will attempt to aspirate without a tip attached).


Avoiding Cross-Contamination

One reason to set `new_tip="always"` is to avoid cross-contamination between wells. However, you should always do a dry run of your protocol to test that the pipette is picking up and dropping tips in the way that your application requires.

[`transfer()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.transfer) will pick up a new tip before *every* aspirate when `new_tip="always"`. This includes when [tip refilling](https://docs.opentrons.com/v2/complex_commands/order_operations.html#complex-tip-refilling) requires multiple aspirations from a single source well.

[`distribute()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.distribute) and [`consolidate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.consolidate) only pick up one tip, even when `new_tip="always"`. For example, this distribute command returns to the source well a second time, because the amount to be distributed (400 µL total plus disposal volume) exceeds the pipette capacity (300 μL):

```python
pipette.distribute(
    volume=200,
    source=plate["A1"],
    dest=[plate["B1"], plate["B2"]],
    new_tip="always",
)
```

But it *does not* pick up a new tip after dispensing into B1:

```python
Picking up tip from A1 of tip rack on 3
Aspirating 220.0 uL from A1 of well plate on 2 at 92.86 uL/sec
Dispensing 200.0 uL into B1 of well plate on 2 at 92.86 uL/sec
Blowing out at A1 of Opentrons Fixed Trash on 12
Aspirating 220.0 uL from A1 of well plate on 2 at 92.86 uL/sec
Dispensing 200.0 uL into B2 of well plate on 2 at 92.86 uL/sec
Blowing out at A1 of Opentrons Fixed Trash on 12
Dropping tip into A1 of Opentrons Fixed Trash on 12
```

If this poses a contamination risk, you can work around it in a few ways:

> - Use `transfer()` with `new_tip="always"` instead.
> - Set [`well_bottom_clearance`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.well_bottom_clearance) high enough that the tip doesn’t contact liquid in the destination well.
> - Use [building block commands](https://docs.opentrons.com/v2/new_atomic_commands.html#v2-atomic-commands) instead of complex commands.



