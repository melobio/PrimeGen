
To dispense liquid from a pipette tip, call the [`InstrumentContext.dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense) method. Using this method, you can specify the dispense volume in µL, the well location, and pipette flow rate. Other parameters let you position the pipette within a well. For example, this snippet tells the robot to dispense 200 µL into well location B1.

```python
pipette.dispense(200, plate['B1'])
```

If the pipette doesn’t move, you can specify an additional dispense action without including a location. To demonstrate, this code snippet pauses the protocol, automatically resumes it, and dispense a second time from location B1.

```python
pipette.dispense(100, plate['B1'])
protocol.delay(seconds=5) # pause for 5 seconds
pipette.dispense(100)     # dispense 100 µL at current position
```


Dispense by Well or Location

The [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense) method includes a `location` parameter that accepts either a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or a [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location).

If you specify a well, like `plate['B1']`, the pipette will dispense from a default position 1 mm above the bottom center of that well. To change the default clearance, you would call [`well_bottom_clearance`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.well_bottom_clearance):

```python
pipette.well_bottom_clearance.dispense=2 # tip is 2 mm above well bottom
pipette.dispense(200, plate['B1'])
```

You can also dispense from a location along the center vertical axis within a well using the [`Well.top()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.top) and [`Well.bottom()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.bottom) methods. These methods move the pipette to a specified distance relative to the top or bottom center of a well:

```python
depth = plate['B1'].bottom(z=2) # tip is 2 mm above well bottom
pipette.dispense(200, depth)
```

See also:

- [Default Positions](https://docs.opentrons.com/v2/robot_position.html#new-default-op-positions) for information about controlling pipette height for a particular pipette.
- [Position Relative to Labware](https://docs.opentrons.com/v2/robot_position.html#position-relative-labware) for formation about controlling pipette height from within a well.
- [Move To](https://docs.opentrons.com/v2/robot_position.html#move-to) for information about moving a pipette to any reachable deck location.


Dispense Flow Rates

Flex and OT-2 pipettes dispense at [default flow rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates) measured in µL/s. Adding a number to the `rate` parameter multiplies the flow rate by that value. As a best practice, don’t set the flow rate higher than 3x the default. For example, this code causes the pipette to dispense at twice its normal rate:

```python
pipette.dispense(200, plate['B1'], rate=2.0)
```

*New in version 2.0.*




Push Out After Dispense

The optional `push_out` parameter of `dispense()` helps ensure all liquid leaves the tip. Use `push_out` for applications that require moving the pipette plunger lower than the default, without performing a full [blow out](https://docs.opentrons.com/v2/basic_commands/liquids.html#blow-out).

For example, this dispense action moves the plunger the equivalent of an additional 5 µL beyond where it would stop if `push_out` was set to zero or omitted:

```python
pipette.pick_up_tip()
pipette.aspirate(100, plate['A1'])
pipette.dispense(100, plate['B1'], push_out=5)
pipette.drop_tip()
```

*New in version 2.15.*

> Note:
>
> In version 7.0.2 and earlier of the robot software, you could accomplish a similar result by dispensing a volume greater than what was aspirated into the pipette. In version 7.1.0 and later, the API will return an error. Calculate the difference between the two amounts and use that as the value of `push_out`.



