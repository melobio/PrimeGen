
For convenience, many methods have location arguments and incorporate movement automatically. This section will focus on moving the pipette independently, without performing other actions like `aspirate()` or `dispense()`.




Move To

The [`InstrumentContext.move_to()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.move_to) method moves a pipette to any reachable location on the deck. If the pipette has picked up a tip, it will move the end of the tip to that position; if it hasn’t, it will move the pipette nozzle to that position.

The [`move_to()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.move_to) method requires the [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location) argument. The location can be automatically generated by methods like `Well.top()` and `Well.bottom()` or one you’ve created yourself, but you can’t move a pipette to a well directly:

```python
pipette.move_to(plate['A1'])              # error; can't move to a well itself
pipette.move_to(plate['A1'].bottom())     # move to the bottom of well A1
pipette.move_to(plate['A1'].top())        # move to the top of well A1
pipette.move_to(plate['A1'].bottom(z=2))  # move to 2 mm above the bottom of well A1
pipette.move_to(plate['A1'].top(z=-2))    # move to 2 mm below the top of well A1
```

When using `move_to()`, by default the pipette will move in an arc: first upwards, then laterally to a position above the target location, and finally downwards to the target location. If you have a reason for doing so, you can force the pipette to move in a straight line to the target location:

```python
pipette.move_to(plate['A1'].top(), force_direct=True)
```

> **Warning:**
>
> 
>
> Moving without an arc runs the risk of the pipette colliding with objects on the deck. Be very careful when using this option, especially when moving longer distances.



Small, direct movements can be useful for working inside of a well, without having the tip exit and re-enter the well. This code sample demonstrates how to move the pipette to a well, make direct movements inside that well, and then move on to a different well:

```python
pipette.move_to(plate['A1'].top())
pipette.move_to(plate['A1'].bottom(1), force_direct=True)
pipette.move_to(plate['A1'].top(-2), force_direct=True)
pipette.move_to(plate['A2'].top())
```

*New in version 2.0.*




Points and Locations

When instructing the robot to move, it’s important to consider the difference between the [`Point`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Point) and [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location) types.

- Points are ordered tuples or named tuples: `Point(10, 20, 30)`, `Point(x=10, y=20, z=30)`, and `Point(z=30, y=20, x=10)` are all equivalent.
- Locations are a higher-order tuple that combines a point with a reference object: a well, a piece of labware, or `None` (the deck).

This distinction is important for the [`Location.move()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location.move) method, which operates on a location, takes a point as an argument, and outputs an updated location. To use this method, include `from opentrons import types` at the start of your protocol. The `move()` method does not mutate the location it is called on, so to perform an action at the updated location, use it as an argument of another method or save it to a variable. For example:

```python
# get the location at the center of well A1
center_location = plate['A1'].center()

# get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1
adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))

# aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1
pipette.aspirate(50, adjusted_location)

# dispense at the same location
pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
```

> **Note:** 
>
> 
>
> The additional `z` arguments of the `top()` and `bottom()` methods (see [Position Relative to Labware](https://docs.opentrons.com/v2/robot_position.html#position-relative-labware) above) are shorthand for adjusting the top and bottom locations with `move()`. You still need to use `move()` to adjust these positions along the x- or y-axis:
>
> ```python
> # the following are equivalent
> pipette.move_to(plate['A1'].bottom(z=2))
> pipette.move_to(plate['A1'].bottom().move(types.Point(z=2)))
> 
> # adjust along the y-axis
> pipette.move_to(plate['A1'].bottom().move(types.Point(y=2)))
> ```

`New in version 2.0.`

