
When used with Python’s [`range`](https://docs.python.org/3/library/stdtypes.html#range) class, a `for` loop brings automation to the tip pickup and tracking process. It also eliminates the need to call `pick_up_tip()` multiple times. For example, this snippet tells the robot to sequentially use all the tips in a 96-tip rack:

```python
for i in range(96):
    pipette.pick_up_tip()
    # liquid handling commands
    pipette.drop_tip()
```

If your protocol requires a lot of tips, add a second tip rack to the protocol. Then, associate it with your pipette and increase the number of repetitions in the loop. The robot will work through both racks.

First, add another tip rack to the sample protocol:

```python
tiprack_2 = protocol.load_labware(
    load_name="opentrons_flex_96_tiprack_1000ul",
    location="C3"
)
```

Next, append the new tip rack to the pipette’s `tip_rack` property:

```python
pipette = protocol.load_instrument(
    instrument_name="flex_1channel_1000",
    mount="left",
    tip_racks=[tiprack_1, tiprack_2],
)
pipette_1.tip_racks.append(tiprack_2)
```

Finally, sum the tip count in the range:

```python
for i in range(192):
    pipette.pick_up_tip()
    pipette.drop_tip()
```

For a more advanced “real-world” example, review the [off-deck location protocol](https://docs.opentrons.com/v2/moving_labware.html#off-deck-location) on the [Moving Labware](https://docs.opentrons.com/v2/moving_labware.html#moving-labware) page. This example also uses a `for` loop to iterate through a tip rack, but it includes other commands that pause the protocol and let you replace an on-deck tip rack with another rack stored in an off-deck location.



