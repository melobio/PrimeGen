
The design goal of this API is to make code readable and easy to understand. A protocol, in its most basic form:

1. Provides some information about who made the protocol and what it is for.
2. Specifies which type of robot the protocol should run on.
3. Tells the robot where to find labware, pipettes, and (optionally) hardware modules.
4. Commands the robot to manipulate its attached hardware.

For example, if we wanted to transfer liquid from well A1 to well B1 on a plate, our protocol would look like:

**Flex**

```python
from opentrons import protocol_api

# metadata
metadata = {
    "protocolName": "My Protocol",
    "author": "Name <opentrons@example.com>",
    "description": "Simple protocol to get started using the Flex",
}

# requirements
requirements = {"robotType": "Flex", "apiLevel": "2.16"}

# protocol run function
def run(protocol: protocol_api.ProtocolContext):
    # labware
    plate = protocol.load_labware(
        "corning_96_wellplate_360ul_flat", location="D1"
    )
    tiprack = protocol.load_labware(
        "opentrons_flex_96_tiprack_200ul", location="D2"
    )

    # pipettes
    left_pipette = protocol.load_instrument(
        "flex_1channel_1000", mount="left", tip_racks=[tiprack]
    )

    # commands
    left_pipette.pick_up_tip()
    left_pipette.aspirate(100, plate["A1"])
    left_pipette.dispense(100, plate["B2"])
    left_pipette.drop_tip()
```

This example proceeds completely linearly. Following it line-by-line, you can see that it has the following effects:

1. Gives the name, contact information, and a brief description for the protocol.

2. Indicates the protocol should run on a Flex robot, using API version 2.16.

3. - Tells the robot that there is:

     A 96-well flat plate in slot D1.A rack of 300 µL tips in slot D2.A 1-channel 1000 µL pipette attached to the left mount, which should pick up tips from the aforementioned rack.

4. - Tells the robot to act by:

     Picking up the first tip from the tip rack.Aspirating 100 µL of liquid from well A1 of the plate.Dispensing 100 µL of liquid into well B1 of the plate.Dropping the tip in the trash.

There is much more that Opentrons robots and the API can do! The [Building Block Commands](https://docs.opentrons.com/v2/new_atomic_commands.html#v2-atomic-commands), [Complex Commands](https://docs.opentrons.com/v2/new_complex_commands.html#v2-complex-commands), and [Hardware Modules](https://docs.opentrons.com/v2/new_modules.html#new-modules) pages cover many of these functions.



**OT-2**

```python
from opentrons import protocol_api

# metadata
metadata = {
    "protocolName": "My Protocol",
    "author": "Name <opentrons@example.com>",
    "description": "Simple protocol to get started using the OT-2",
}

# requirements
requirements = {"robotType": "OT-2", "apiLevel": "2.16"}

# protocol run function
def run(protocol: protocol_api.ProtocolContext):
    # labware
    plate = protocol.load_labware(
        "corning_96_wellplate_360ul_flat", location="1"
    )
    tiprack = protocol.load_labware(
        "opentrons_96_tiprack_300ul", location="2"
    )

    # pipettes
    left_pipette = protocol.load_instrument(
        "p300_single", mount="left", tip_racks=[tiprack]
    )

    # commands
    left_pipette.pick_up_tip()
    left_pipette.aspirate(100, plate["A1"])
    left_pipette.dispense(100, plate["B2"])
    left_pipette.drop_tip()
```

This example proceeds completely linearly. Following it line-by-line, you can see that it has the following effects:

1. Gives the name, contact information, and a brief description for the protocol.

2. Indicates the protocol should run on an OT-2 robot, using API version 2.14.

3. - Tells the robot that there is:

     A 96-well flat plate in slot 1.A rack of 300 µL tips in slot 2.A single-channel 300 µL pipette attached to the left mount, which should pick up tips from the aforementioned rack.

4. - Tells the robot to act by:

     Picking up the first tip from the tip rack.Aspirating 100 µL of liquid from well A1 of the plate.Dispensing 100 µL of liquid into well B1 of the plate.Dropping the tip in the trash.

There is much more that Opentrons robots and the API can do! The [Building Block Commands](https://docs.opentrons.com/v2/new_atomic_commands.html#v2-atomic-commands), [Complex Commands](https://docs.opentrons.com/v2/new_complex_commands.html#v2-complex-commands), and [Hardware Modules](https://docs.opentrons.com/v2/new_modules.html#new-modules) pages cover many of these functions.

