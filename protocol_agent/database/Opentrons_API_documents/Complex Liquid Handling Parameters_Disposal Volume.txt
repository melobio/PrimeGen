
The `disposal_volume` parameter controls how much extra liquid is aspirated as part of a [`distribute()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.distribute) command. Including a disposal volume can improve the accuracy of each dispense. The pipette blows out the disposal volume of liquid after dispensing. To skip aspirating and blowing out extra liquid, set `disposal_volume=0`.

By default, `disposal_volume` is the [minimum volume](https://docs.opentrons.com/v2/pipettes/loading.html#new-pipette-models) of the pipette, but you can set it to any amount:

```python
pipette.distribute(
    volume=100,
    source=plate["A1"],
    dest=[plate["B1"], plate["B2"]],
    disposal_volume=10,  # reduce from default 20 µL to 10 µL
)
```

*New in version 2.0.*

If the amount to aspirate plus the disposal volume exceeds the tip’s capacity, `distribute()` will use a [tip refilling strategy](https://docs.opentrons.com/v2/complex_commands/order_operations.html#complex-tip-refilling). In such cases, the pipette will aspirate and blow out the disposal volume *for each aspiration*. For example, this command will require tip refilling with a 1000 µL pipette:

```python
pipette.distribute(
    volume=120,
    source=reservoir["A1"],
    dest=[plate.columns()[0]],
    disposal_volume=50,
)
```

The amount to dispense in the destination is 960 µL (120 µL for each of 8 wells in the column). Adding the 50 µL disposal volume exceeds the 1000 µL capacity of the tip. The command will be split across two aspirations, each with the full disposal volume of 50 µL. The pipette will dispose *a total of 100 µL* during the command.

> Note:
>
> [`transfer()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.transfer) will not aspirate additional liquid if you set `disposal_volume`. However, it will perform a very small blow out after each dispense.
>
> [`consolidate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.consolidate) ignores `disposal_volume` completely.



