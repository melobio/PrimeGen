
*class* opentrons.types.**Location**(*point: [Point](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Point)*, *labware: [Union](https://docs.python.org/3/library/typing.html#typing.Union)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), [Well](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well), [str](https://docs.python.org/3/library/stdtypes.html#str), ModuleGeometry, LabwareLike, [None](https://docs.python.org/3/library/constants.html#None), ModuleContext]*)

A location to target as a motion.

The location contains a [`Point`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Point) (in [Position Relative to the Deck](https://docs.opentrons.com/v2/robot_position.html#protocol-api-deck-coords)) and possibly an associated [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) or [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) instance.

It should rarely be constructed directly by the user; rather, it is the return type of most [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) accessors like [`Well.top()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.top) and is passed directly into a method like `InstrumentContext.aspirate()`.

> **Warning:**
>
> 
>
> The `.labware` attribute of this class is used by the protocol API internals to, among other things, determine safe heights to retract the instruments to when moving between locations. If constructing an instance of this class manually, be sure to either specify `None` as the labware (so the robot does its worst case retraction) or specify the correct labware for the `.point` attribute.

> **Warning:**
>
> 
>
> The `==` operation compares both the position and associated labware. If you only need to compare locations, compare the `.point` of each item.



**move**(*self*, *point: 'Point'*) → "'Location'"

Alter the point stored in the location while preserving the labware.

This returns a new Location and does not alter the current one. It should be used like

```python
loc = Location(Point(1, 1, 1), None)
>>> new_loc = loc.move(Point(1, 1, 1))
>>>
>>> # The new point is the old one plus the given offset.
>>> assert new_loc.point == Point(2, 2, 2)  # True
>>>
>>> # The old point hasn't changed.
>>> assert loc.point == Point(1, 1, 1)  # True
```

*class* opentrons.types.**Mount**(*value*)

An enumeration.

*exception* opentrons.types.**PipetteNotAttachedError**

An error raised if a pipette is accessed that is not attached

*class* opentrons.types.**Point**(*x*, *y*, *z*)

*property* **x**Alias for field number 0*property* **y**Alias for field number 1*property* **z**Alias for field number 2



opentrons.protocol_api.**OFF_DECK**

A special location value, indicating that a labware is not currently on the robot’s deck.

See [The Off-Deck Location](https://docs.opentrons.com/v2/moving_labware.html#off-deck-location) for details on using `OFF_DECK` with [`ProtocolContext.move_labware()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.move_labware).



