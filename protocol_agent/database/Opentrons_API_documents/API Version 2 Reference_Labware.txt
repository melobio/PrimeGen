
- *class* opentrons.protocol_api.**Labware**(*core: AbstractLabware[Any]*, *api_version: APIVersion*, *protocol_core: ProtocolCore*, *core_map: LoadedCoreMap*)

  

  This class represents a labware, such as a PCR plate, a tube rack, reservoir, tip rack, etc. It defines the physical geometry of the labware, and provides methods for accessing wells within the labware.

  It is commonly created by calling `ProtocolContext.load_labware()`.

  To access a labware’s wells, you can use its well accessor methods: [`wells_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells_by_name), [`wells()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells), [`columns()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns), [`rows()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows), [`rows_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows_by_name), and [`columns_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns_by_name). You can also use an instance of a labware as a Python dictionary, accessing wells by their names. The following example shows how to use all of these methods to access well A1:

  ```python
  labware = context.load_labware('corning_96_wellplate_360ul_flat', 1)
  labware['A1']
  labware.wells_by_name()['A1']
  labware.wells()[0]
  labware.rows()[0][0]
  labware.columns()[0][0]
  labware.rows_by_name()['A'][0]
  labware.columns_by_name()[0][0]
  ```

  *property* **api_version***: APIVersion*

  *New in version 2.0.*

  *property* **calibrated_offset***: [Point](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Point)*

  *New in version 2.0.*

  *property* **child***: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]*

  The labware (if any) present on this labware.*New in version 2.15.*



**columns**(*self*, *\*args: 'Union[int*, *str]'*) → 'List[List[Well]]'

Accessor function used to navigate through a labware by column.

With indexing one can treat it as a typical python nested list. For example, access row A with `labware.columns()[0]`. This will output `['A1', 'B1', 'C1', 'D1'...]`.

Note that this method takes args for backward-compatibility. But using args is deprecated and will be removed in future versions. Args can be either strings or integers, but must all be the same type. For example, `self.columns(1, 4, 8)` or `self.columns('1', '2')` are valid, but `self.columns('1', 4)` is not.

Returns:A list of column lists.

*New in version 2.0.*



**columns_by_index**(*self*) → 'Dict[str, List[Well]]'

*Deprecated since version 2.0:* Use [`columns_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.columns_by_name) instead.

*New in version 2.0.*



**columns_by_name**(*self*) → 'Dict[str, List[Well]]'

Accessor function used to navigate through a labware by column name.

With indexing one can treat it as a typical python dictionary. For example, access row A with `labware.columns_by_name()['1']`. This will output `['A1', 'B1', 'C1', 'D1'...]`.

Returns:Dictionary of [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) lists keyed by column name.

*New in version 2.0.*



*property* **highest_z***: [float](https://docs.python.org/3/library/functions.html#float)

The z-coordinate of the highest single point anywhere on the labware.

This is taken from the `zDimension` property of the `dimensions` object in the labware definition and takes into account the calibration offset.

*New in version 2.0.*

*roperty* **is_adapter***: [bool](https://docs.python.org/3/library/functions.html#bool)

*New in version 2.15.*

*property* **is_tiprack***: [bool](https://docs.python.org/3/library/functions.html#bool)

*New in version 2.0.*

**load_labware**(*self*, *name: 'str'*, *label: 'Optional[str]' = None*, *namespace: 'Optional[str]' = None*, *version: 'Optional[int]' = None*) → 'Labware'

Load a compatible labware onto the labware using its load parameters.

The parameters of this function behave like those of [`ProtocolContext.load_labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_labware) (which loads labware directly onto the deck). Note that the parameter `name` here corresponds to `load_name` on the `ProtocolContext` function.

Returns:The initialized and loaded labware object.

*New in version 2.15.*



**load_labware_from_definition**(*self*, *definition: 'LabwareDefinition'*, *label: 'Optional[str]' = None*) → 'Labware'

Load a labware onto the module using an inline definition.

Parameters:

- **definition** – The labware definition.
- **label** ([*str*](https://docs.python.org/3/library/stdtypes.html#str)) – An optional special name to give the labware. If specified, this is the name the labware will appear as in the run log and the calibration view in the Opentrons App.

Returns:The initialized and loaded labware object.

*New in version 2.15.*



*property* **load_name***: [str](https://docs.python.org/3/library/stdtypes.html#str)

The API load name of the labware definition.



*New in version 2.0.*



*property* **magdeck_engage_height***: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[[float](https://docs.python.org/3/library/functions.html#float)]

Return the default magnet engage height that [`MagneticModuleContext.engage()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticModuleContext.engage) will use for this labware.



> **Warning:**
>
> 
>
> This currently returns confusing and unpredictable results that do not necessarily match what [`MagneticModuleContext.engage()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.MagneticModuleContext.engage) will actually choose for its default height.
>
> The confusion is related to how this height’s units and origin point are defined, and differences between Magnetic Module generations.
>
> For now, we recommend you avoid accessing this property directly.

*New in version 2.0.*

***property*** ***name***: [str](https://docs.python.org/3/library/stdtypes.html#str)

Can either be the canonical name of the labware, which is used to load it, or the label of the labware specified by a user.*New in version 2.0.*

*property* **parameters***: LabwareParameters*

Internal properties of a labware including type and quirks.

*New in version 2.0.*



*property* **parent***: Union[[str](https://docs.python.org/3/library/stdtypes.html#str), [Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), ModuleTypes, OffDeckType]*

The parent of this labware—where this labware is loaded.



Returns:



If the labware is directly on the robot’s deck, the `str` name of the deck slot, like `"D1"` (Flex) or `"1"` (OT-2). See [Deck Slots](https://docs.opentrons.com/v2/deck_slots.html#deck-slots).

If the labware is on a module, a `ModuleContext`.

If the labware is on a labware or adapter, a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware).

If the labware is off-deck, [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK).



*Changed in version 2.14:* Return type for module parent changed to `ModuleContext`. Prior to this version, an internal geometry interface is returned.

*Changed in version 2.15:* Will return a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) if the labware was loaded onto a labware/adapter. Will now return [`OFF_DECK`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.OFF_DECK) if the labware is off-deck. Formerly, if the labware was removed by using `del` on [`deck`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.deck), this would return where it was before its removal.





property* **quirks***: [List](https://docs.python.org/3/library/typing.html#typing.List)[[str](https://docs.python.org/3/library/stdtypes.html#str)]

Quirks specific to this labware.



*New in version 2.0.*



**reset**(*self*) → 'None'

Reset all tips in a tip rack.

*Changed in version 2.14:* This method will raise an exception if you call it on a labware that isn’t a tip rack. Formerly, it would do nothing.

*New in version 2.0.*



**rows**(*self*, *\*args: 'Union[int*, *str]'*) → 'List[List[Well]]'

Accessor function used to navigate through a labware by row.

With indexing one can treat it as a typical python nested list. For example, access row A with `labware.rows()[0]`. This will output `['A1', 'A2', 'A3', 'A4'...]`.

Note that this method takes args for backward-compatibility. But using args is deprecated and will be removed in future versions. Args can be either strings or integers, but must all be the same type. For example, `self.columns(1, 4, 8)` or `self.columns('1', '2')` are valid, but `self.columns('1', 4)` is not.

Returns:A list of row lists.

*New in version 2.0.*



**rows_by_index**(*self*) → 'Dict[str, List[Well]]'

*Deprecated since version 2.0:* Use [`rows_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.rows_by_name) instead.

*New in version 2.0.*



**rows_by_name**(*self*) → 'Dict[str, List[Well]]'

Accessor function used to navigate through a labware by row name.

With indexing one can treat it as a typical python dictionary. For example, access row A with `labware.rows_by_name()['A']`. This will output `['A1', 'A2', 'A3', 'A4'...]`.

Returns:Dictionary of [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) lists keyed by row name.

*New in version 2.0.*



**set_calibration**(*self*, *delta: 'Point'*) → 'None'

An internal, deprecated method used for updating the offset on the object.

*Deprecated since version 2.14.*



**set_offset**(*self*, *x: 'float'*, *y: 'float'*, *z: 'float'*) → 'None'

Set the labware’s position offset.

The offset is an x, y, z vector in deck coordinates (see [Position Relative to the Deck](https://docs.opentrons.com/v2/robot_position.html#protocol-api-deck-coords)) that the motion system will add to any movement targeting this labware instance.

The offset *will not* apply to any other labware instances, even if those labware are of the same type.

> **Caution:**
>
> 
>
> This method is *only* for use with mechanisms like [`opentrons.execute.get_protocol_api`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.execute.get_protocol_api), which lack an interactive way to adjust labware offsets. (See [Advanced Control](https://docs.opentrons.com/v2/new_advanced_running.html#advanced-control).)
>
> If you’re uploading a protocol via the Opentrons App, don’t use this method, because it will produce undefined behavior. Instead, use Labware Position Check in the app.
>
> Because protocols using [API version](https://docs.opentrons.com/v2/versioning.html#v2-versioning) 2.14 or higher can currently *only* be uploaded via the Opentrons App, it doesn’t make sense to use this method with them. Trying to do so will raise an exception.

*New in version 2.12.*



*property* **tip_length***: [float](https://docs.python.org/3/library/functions.html#float)

*New in version 2.0.*

*property* **uri***: [str](https://docs.python.org/3/library/stdtypes.html#str)

A string fully identifying the labware.

Returns:The URI, `"namespace/loadname/version"`

*New in version 2.0.*



**well**(*self*, *idx: 'Union[int, str]'*) → 'Well'

Deprecated. Use result of [`wells()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells) or [`wells_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells_by_name).

*New in version 2.0.*



**wells**(*self*, *\*args: 'Union[str*, *int]'*) → 'List[Well]'

Accessor function that generates a list of wells in a top down, left to right order. This is representative of moving down rows and across columns (i.e., A1, B1, C1…A2, B2, C2…).

With indexing one can treat it as a typical python list. For example, access well A1 with `labware.wells()[0]`.

Note that this method takes args for backward-compatibility. But using args is deprecated and will be removed in future versions. Args can be either strings or integers, but must all be the same type. For example, `self.columns(1, 4, 8)` or `self.columns('1', '2')` are valid, but `self.columns('1', 4)` is not.

Returns:Ordered list of all wells in a labware.

*New in version 2.0.*



**wells_by_index**(*self*) → 'Dict[str, Well]'

*Deprecated since version 2.0:* Use [`wells_by_name()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells_by_name) or dict access instead.

*New in version 2.0.*



**wells_by_name**(*self*) → 'Dict[str, Well]'

Accessor function used to create a look-up table of wells by name.

With indexing one can treat it as a typical Python dictionary whose keys are well names. For example, access well A1 with `labware.wells_by_name()['A1']`.

Returns:Dictionary of [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) objects keyed by well name.

*New in version 2.0.*



