
*class* opentrons.protocol_api.**InstrumentContext**(*core: AbstractInstrument[AbstractWellCore]*, *protocol_core: AbstractProtocol[AbstractInstrument[AbstractWellCore], AbstractLabware[AbstractWellCore], AbstractModuleCore]*, *broker: LegacyBroker*, *api_version: APIVersion*, *tip_racks: [List](https://docs.python.org/3/library/typing.html#typing.List)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]*, *trash: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[[Union](https://docs.python.org/3/library/typing.html#typing.Union)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), TrashBin, WasteChute]]*, *requested_as: [str](https://docs.python.org/3/library/stdtypes.html#str)*)

A context for a specific pipette or instrument.

The InstrumentContext class provides the objects, attributes, and methods that allow you to use pipettes in your protocols.

Methods generally fall into one of two categories.

- They can change the state of the InstrumentContext object, like how fast it moves liquid or where it disposes of used tips.
- They can command the instrument to perform an action, like picking up tips, moving to certain locations, and aspirating or dispensing liquid.

Objects in this class should not be instantiated directly. Instead, instances are returned by [`ProtocolContext.load_instrument()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_instrument).

*New in version 2.0.*



*property* **active_channels***: [int](https://docs.python.org/3/library/functions.html#int)*

The number of channels the pipette will use to pick up tips.

By default, all channels on the pipette. Use [`configure_nozzle_layout()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.configure_nozzle_layout) to set the pipette to use fewer channels.

*New in version 2.16.*

**air_gap**(*self*, *volume: 'Optional[float]' = None*, *height: 'Optional[float]' = None*) → 'InstrumentContext'

Draw air into the pipette’s tip at the current well.

See [Air Gap](https://docs.opentrons.com/v2/basic_commands/liquids.html#air-gap).



Parameters:

- **volume** ([*float*](https://docs.python.org/3/library/functions.html#float)) – The amount of air, measured in µL. Calling `air_gap()` with no arguments uses the entire remaining volume in the pipette.
- **height** ([*float*](https://docs.python.org/3/library/functions.html#float)) – The height, in mm, to move above the current well before creating the air gap. The default is 5 mm above the current well.

Raises:

`UnexpectedTipRemovalError` – If no tip is attached to the pipette.

Raises:

[**RuntimeError**](https://docs.python.org/3/library/exceptions.html#RuntimeError) – If location cache is `None`. This should happen if `air_gap()` is called without first calling a method that takes a location (e.g., [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate), [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense))

Returns:

This instance.



> **Note：**
>
> 
>
> Both `volume` and `height` are optional, but if you want to specify only `height` you must do it as a keyword argument: `pipette.air_gap(height=2)`. If you call `air_gap` with a single, unnamed argument, it will always be interpreted as a volume.

*New in version 2.0.*

*property* **api_version***: APIVersion*

*New in version 2.0.*

**aspirate**(*self*, *volume: 'Optional[float]' = None*, *location: 'Optional[Union[types.Location, labware.Well]]' = None*, *rate: 'float' = 1.0*) → 'InstrumentContext'

Draw liquid into a pipette tip.

See [Aspirate](https://docs.opentrons.com/v2/basic_commands/liquids.html#new-aspirate) for more details and examples.

Parameters:

- **volume** ([*int*](https://docs.python.org/3/library/functions.html#int) *or* [*float*](https://docs.python.org/3/library/functions.html#float)) –

  The volume to aspirate, measured in µL. If unspecified, defaults to the maximum volume for the pipette and its currently attached tip.

  If `aspirate` is called with a volume of precisely 0, its behavior depends on the API level of the protocol. On API levels below 2.16, it will behave the same as a volume of `None`/unspecified: aspirate until the pipette is full. On API levels at or above 2.16, no liquid will be aspirated.

  

- **location** –

  Tells the robot where to aspirate from. The location can be a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or a [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location).

  - If the location is a `Well`, the robot will aspirate at or above the bottom center of the well. The distance (in mm) from the well bottom is specified by [`well_bottom_clearance.aspirate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.well_bottom_clearance).
  - If the location is a `Location` (e.g., the result of [`Well.top()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.top) or [`Well.bottom()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.bottom)), the robot will aspirate from that specified position.
  - If the `location` is unspecified, the robot will aspirate from its current position.

- **rate** ([*float*](https://docs.python.org/3/library/functions.html#float)) – A multiplier for the default flow rate of the pipette. Calculated as `rate` multiplied by [`flow_rate.aspirate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate). If not specified, defaults to 1.0. See [Pipette Flow Rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates).

Returns:This instance.

> **Note:**
>
> 
>
> If `aspirate` is called with a single, unnamed argument, it will treat that argument as `volume`. If you want to call `aspirate` with only `location`, specify it as a keyword argument: `pipette.aspirate(location=plate['A1'])`

*New in version 2.0.*



**blow_out**(*self*, *location: 'Optional[Union[types.Location, labware.Well, TrashBin, WasteChute]]' = None*) → 'InstrumentContext'

Blow an extra amount of air through a pipette’s tip to clear it.

If [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense) is used to empty a pipette, usually a small amount of liquid remains in the tip. During a blowout, the pipette moves the plunger beyond its normal limits to help remove all liquid from the pipette tip. See [Blow Out](https://docs.opentrons.com/v2/basic_commands/liquids.html#blow-out).

- Parameters:

  **location** ([`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location) or `None`) – The blowout location. If no location is specified, the pipette will blow out from its current position.

- Raises:

  [**RuntimeError**](https://docs.python.org/3/library/exceptions.html#RuntimeError) – If no location is specified and the location cache is `None`. This should happen if `blow_out()` is called without first calling a method that takes a location, like [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) or [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense).

- Returns:

  This instance.

*New in version 2.0.*



*property* **channels**: 

The number of channels on the pipette.

Possible values are 1, 8, or 96.

See also [`type`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.type).

*New in version 2.0.*



**configure_for_volume**(*self*, *volume: 'float'*) → 'None'

Configure a pipette to handle a specific volume of liquid, measured in µL. The pipette enters a volume mode depending on the volume provided. Changing pipette modes alters properties of the instance of [`InstrumentContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext), such as default flow rate, minimum volume, and maximum volume. The pipette remains in the mode set by this function until it is called again.

The Flex 1-Channel 50 µL and Flex 8-Channel 50 µL pipettes must operate in a low-volume mode to accurately dispense very small volumes of liquid. Low-volume mode can only be set by calling `configure_for_volume()`. See [Volume Modes](https://docs.opentrons.com/v2/pipettes/volume_modes.html#pipette-volume-modes).



> **Note:**
>
> 
>
> Changing a pipette’s mode will reset its [flow rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates).

This function will raise an error if called when the pipette’s tip contains liquid. It won’t raise an error if a tip is not attached, but changing modes may affect which tips the pipette can subsequently pick up without raising an error.

This function will also raise an error if `volume` is outside of the [minimum and maximum capacities](https://docs.opentrons.com/v2/pipettes/loading.html#new-pipette-models) of the pipette (e.g., setting `volume=1` for a Flex 1000 µL pipette).

- Parameters:

  **volume** ([*float*](https://docs.python.org/3/library/functions.html#float)) – The volume, in µL, that the pipette will prepare to handle.

*New in version 2.15.*



**configure_nozzle_layout**(*self*, *style: 'NozzleLayout'*, *start: 'Optional[str]' = None*, *front_right: 'Optional[str]' = None*, *tip_racks: 'Optional[List[labware.Labware]]' = None*) → 'None'

Configure how many tips the 96-channel pipette will pick up.

Changing the nozzle layout will affect gantry movement for all subsequent pipetting actions that the pipette performs. It also alters the pipette’s behavior for picking up tips. The pipette will continue to use the specified layout until this function is called again.



> **Note**
>
> 
>
> When picking up fewer than 96 tips at once, the tip rack *must not* be placed in a tip rack adapter in the deck. If you try to pick up fewer than 96 tips from a tip rack that is in an adapter, the API will raise an error.



Parameters:

- **style** (`NozzleLayout` or `None`) –

  The shape of the nozzle layout.

  - `COLUMN` sets the pipette to use 8 nozzles, aligned from front to back with respect to the deck. This corresponds to a column of wells on labware.
  - `ALL` resets the pipette to use all of its nozzles. Calling `configure_nozzle_layout` with no arguments also resets the pipette.

  

- **start** (str or `None`) –

  The nozzle at the back left of the layout, which the robot uses to determine how it will move to different locations on the deck. The string should be of the same format used when identifying wells by name. Required unless setting `style=ALL`.

  > **Note:**
  >
  > 
  >
  > When using the `COLUMN` layout, the only fully supported value is `start="A12"`. You can use `start="A1"`, but this will disable tip tracking and you will have to specify the `location` every time you call [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip), such that the pipette picks up columns of tips *from right to left* on the tip rack.

* **tip_racks** (List[[`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]) – Behaves the same as setting the `tip_racks` parameter of [`load_instrument()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_instrument). If not specified, the new configuration resets [`InstrumentContext.tip_racks`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.tip_racks) and you must specify the location every time you call [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip).

*New in version 2.16.*



**consolidate**(*self*, *volume: 'Union[float*, *Sequence[float]]'*, *source: 'List[labware.Well]'*, *dest: 'labware.Well'*, *\*args: 'Any'*, *\*\*kwargs: 'Any'*) → 'InstrumentContext'

Move liquid from multiple source wells to a single destination well.

Parameters:

- **volume** – The amount, in µL, to aspirate from each source well.
- **source** – A list of wells to aspirate liquid from.
- **dest** – A single well to dispense liquid into.
- **kwargs** – See [`transfer()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.transfer) and the [Complex Liquid Handling Parameters](https://docs.opentrons.com/v2/complex_commands/parameters.html#complex-params) page. Some parameters behave differently than when transferring. `disposal_volume` and `mix_before` are ignored.

Returns:This instance.

*New in version 2.0.*

*property* **current_volume***: [float](https://docs.python.org/3/library/functions.html#float)

The current amount of liquid held in the pipette, measured in µL.

*New in version 2.0.*

*property* **default_speed***: [float](https://docs.python.org/3/library/functions.html#float)

The speed at which the robot’s gantry moves in mm/s.

The default speed for Flex varies between 300 and 350 mm/s. The OT-2 default is 400 mm/s. In addition to changing the default, the speed of individual motions can be changed with the `speed` argument of the [`InstrumentContext.move_to()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.move_to) method. See [Gantry Speed](https://docs.opentrons.com/v2/robot_position.html#gantry-speed).

*New in version 2.0.*



**dispense**(*self*, *volume: 'Optional[float]' = None*, *location: 'Optional[Union[types.Location, labware.Well, TrashBin, WasteChute]]' = None*, *rate: 'float' = 1.0*, *push_out: 'Optional[float]' = None*) → 'InstrumentContext'

Dispense liquid from a pipette tip.

See [Dispense](https://docs.opentrons.com/v2/basic_commands/liquids.html#new-dispense) for more details and examples.

Parameters:

- **volume** ([*int*](https://docs.python.org/3/library/functions.html#int) *or* [*float*](https://docs.python.org/3/library/functions.html#float)) –

  The volume to dispense, measured in µL. If unspecified, defaults to [`current_volume`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.current_volume). If only a volume is passed, the pipette will dispense from its current position.

  If `dispense` is called with a volume of precisely 0, its behavior depends on the API level of the protocol. On API levels below 2.16, it will behave the same as a volume of `None`/unspecified: dispense all liquid in the pipette. On API levels at or above 2.16, no liquid will be dispensed.

  

- **location** –

  Tells the robot where to dispense liquid held in the pipette. The location can be a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or a [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location).

  - If the location is a `Well`, the pipette will dispense at or above the bottom center of the well. The distance (in mm) from the well bottom is specified by [`well_bottom_clearance.dispense`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.well_bottom_clearance).
  - If the location is a `Location` (e.g., the result of [`Well.top()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.top) or [`Well.bottom()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.bottom)), the robot will dispense into that specified position.
  - If the `location` is unspecified, the robot will dispense into its current position.

  If only a `location` is passed (e.g., `pipette.dispense(location=plate['A1'])`), all of the liquid aspirated into the pipette will be dispensed (the amount is accessible through [`current_volume`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.current_volume)).

- **rate** ([*float*](https://docs.python.org/3/library/functions.html#float)) – How quickly a pipette dispenses liquid. The speed in µL/s is calculated as `rate` multiplied by [`flow_rate.dispense`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate). If not specified, defaults to 1.0. See [Pipette Flow Rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates).

- **push_out** ([*float*](https://docs.python.org/3/library/functions.html#float)) –

  Continue past the plunger bottom to help ensure all liquid leaves the tip. Measured in µL. The default value is `None`.

  See [Push Out After Dispense](https://docs.opentrons.com/v2/basic_commands/liquids.html#push-out-dispense) for details.

  

Returns:This instance.



> **Note**
>
> 
>
> If `dispense` is called with a single, unnamed argument, it will treat that argument as `volume`. If you want to call `dispense` with only `location`, specify it as a keyword argument: `pipette.dispense(location=plate['A1'])`.

*Changed in version 2.15:* Added the `push_out` parameter.

**distribute**(*self*, *volume: 'Union[float*, *Sequence[float]]'*, *source: 'labware.Well'*, *dest: 'List[labware.Well]'*, *\*args: 'Any'*, *\*\*kwargs: 'Any'*) → 'InstrumentContext'



Move a volume of liquid from one source to multiple destinations.

Parameters:

- **volume** – The amount, in µL, to dispense into each destination well.

- **source** – A single well to aspirate liquid from.

- **dest** – A list of wells to dispense liquid into.

- **kwargs** –

  See [`transfer()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.transfer) and the [Complex Liquid Handling Parameters](https://docs.opentrons.com/v2/complex_commands/parameters.html#complex-params) page. Some parameters behave differently than when transferring.

  * `disposal_volume` aspirates additional liquid to improve the accuracy of each dispense. Defaults to the minimum volume of the pipette. See [Disposal Volume](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-disposal-volume) for details.
  * `mix_after` is ignored.

Returns:This instance.

*New in version 2.0.*



**drop_tip**(*self*, *location: 'Optional[Union[types.Location, labware.Well, TrashBin, WasteChute]]' = None*, *home_after: 'Optional[bool]' = None*) → 'InstrumentContext'

Drop the current tip.

See [Dropping a Tip](https://docs.opentrons.com/v2/basic_commands/pipette_tips.html#pipette-drop-tip) for examples.

If no location is passed (e.g. `pipette.drop_tip()`), the pipette will drop the attached tip into its [`trash_container`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.trash_container).

Starting with API version 2.15, if the trash container is the default fixed trash, the API will instruct the pipette to drop tips in different locations within the trash container. Varying the tip drop location helps prevent tips from piling up in a single location.

The location in which to drop the tip can be manually specified with the `location` argument. The `location` argument can be specified in several ways:

- As a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well). This uses a default location relative to the well. This style of call can be used to make the robot drop a tip into labware like a well plate or a reservoir. For example, `pipette.drop_tip(location=reservoir["A1"])`.
- As a [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location). For example, to drop a tip from an unusually large height above the tip rack, you could call `pipette.drop_tip(tip_rack["A1"].top(z=10))`.
- As a `TrashBin`. This uses a default location relative to the TrashBin object. For example, `pipette.drop_tip(location=trash_bin)`.
- As a `WasteChute`. This uses a default location relative to the WasteChute object. For example, `pipette.drop_tip(location=waste_chute)`.

Parameters:

- **location** ([`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location) or [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or `None`) – The location to drop the tip.

- **home_after** –

  Whether to home the pipette’s plunger after dropping the tip. If not specified, defaults to `True` on an OT-2.

  When `False`, the pipette does not home its plunger. This can save a few seconds, but is not recommended. Homing helps the robot track the pipette’s position.

  

Returns:This instance.

*New in version 2.0.*

*property* **flow_rate***: FlowRates*

The speeds, in µL/s, configured for the pipette.

See [Pipette Flow Rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates).

This is an object with attributes `aspirate`, `dispense`, and `blow_out` holding the flow rate for the corresponding operation.



> **Note**
>
> 
>
> Setting values of [`speed`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.speed), which is deprecated, will override the values in [`flow_rate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate).

*New in version 2.0.*

*property* **has_tip***: [bool](https://docs.python.org/3/library/functions.html#bool)

Whether this instrument has a tip attached or not.

The value of this property is determined logically by the API, not by detecting the physical presence of a tip. This is the case even on Flex, which has sensors to detect tip attachment.



*New in version 2.7.*

**home**(*self*) → 'InstrumentContext'

Home the robot.

See [Homing](https://docs.opentrons.com/v2/basic_commands/utilities.html#utility-homing).

Returns:This instance.

*New in version 2.0.*

**home_plunger**(*self*) → 'InstrumentContext'

Home the plunger associated with this mount.

Returns:This instance.

New in version 2.0.



*property* **hw_pipette**: PipetteDict

View the information returned by the hardware API directly.

Raises:types.PipetteNotAttachedError`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.PipetteNotAttachedError) if the pipette is no longer attached (should not happen).

*New in version 2.0.*



*property* **max_volume**: [float](https://docs.python.org/3/library/functions.html#float)

The maximum volume, in µL, that the pipette can hold.

The maximum volume that you can actually aspirate might be lower than this, depending on what kind of tip is attached to this pipette. For example, a P300 Single-Channel pipette always has a `max_volume` of 300 µL, but if it’s using a 200 µL filter tip, its usable volume would be limited to 200 µL.

*New in version 2.0.*



*property* **min_volume***: [float](https://docs.python.org/3/library/functions.html#float)

The minimum volume, in µL, that the pipette can hold. This value may change based on the [volume mode](https://docs.opentrons.com/v2/pipettes/volume_modes.html#pipette-volume-modes) that the pipette is currently configured for.

*New in version 2.0.*



**mix**(*self*, *repetitions: 'int' = 1*, *volume: 'Optional[float]' = None*, *location: 'Optional[Union[types.Location, labware.Well]]' = None*, *rate: 'float' = 1.0*) → 'InstrumentContext'

Mix a volume of liquid by repeatedly aspirating and dispensing it in a single location.

See [Mix](https://docs.opentrons.com/v2/basic_commands/liquids.html#mix) for examples.

Parameters:

- **repetitions** – Number of times to mix (default is 1).

- **volume** –

  The volume to mix, measured in µL. If unspecified, defaults to the maximum volume for the pipette and its attached tip.

  If `mix` is called with a volume of precisely 0, its behavior depends on the API level of the protocol. On API levels below 2.16, it will behave the same as a volume of `None`/unspecified: mix the full working volume of the pipette. On API levels at or above 2.16, no liquid will be mixed.

  

- **location** – The [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location) where the pipette will mix. If unspecified, the pipette will mix at its current position.

- **rate** – How quickly the pipette aspirates and dispenses liquid while mixing. The aspiration flow rate is calculated as `rate` multiplied by [`flow_rate.aspirate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate). The dispensing flow rate is calculated as `rate` multiplied by [`flow_rate.dispense`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate). See [Pipette Flow Rates](https://docs.opentrons.com/v2/pipettes/characteristics.html#new-plunger-flow-rates).

Raises:UnexpectedTipRemovalError` – If no tip is attached to the pipette.

Returns:This instance.



> **Note:**
>
> 
>
> All the arguments of `mix` are optional. However, if you omit one of them, all subsequent arguments must be passed as keyword arguments. For instance, `pipette.mix(1, location=wellplate['A1'])` is a valid call, but `pipette.mix(1, wellplate['A1'])` is not.

*New in version 2.0.*

*property* **model***: [str](https://docs.python.org/3/library/stdtypes.html#str)*

The model string for the pipette (e.g., `'p300_single_v1.3'`)

*New in version 2.0.*

*property* **mount***: [str](https://docs.python.org/3/library/stdtypes.html#str)

Return the name of the mount the pipette is attached to.

The possible names are `"left"` and `"right"`.

*New in version 2.0.*

**move_to**(*self*, *location: 'Union[types.Location, TrashBin, WasteChute]'*, *force_direct: 'bool' = False*, *minimum_z_height: 'Optional[float]' = None*, *speed: 'Optional[float]' = None*, *publish: 'bool' = True*) → 'InstrumentContext'

Move the instrument.

See [Move To](https://docs.opentrons.com/v2/robot_position.html#move-to) for examples.

Parameters:

- **location** ([`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location)) – The location to move to.

- **force_direct** –

  If `True`, move directly to the destination without arc motion.

  > **Warning：**
  >
  > 
  >
  > Forcing direct motion can cause the pipette to crash into labware, modules, or other objects on the deck.

- **minimum_z_height** – An amount, measured in mm, to raise the mid-arc height. The mid-arc height can’t be lowered.
- **speed** – The speed at which to move. By default, [`InstrumentContext.default_speed`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.default_speed). This controls the straight linear speed of the motion. To limit individual axis speeds, use [`ProtocolContext.max_speeds`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.max_speeds).
- **publish** – Whether to list this function call in the run preview. Default is `True`.

*New in version 2.0.*

*property* **name***: [str](https://docs.python.org/3/library/stdtypes.html#str)*

The name string for the pipette (e.g., `"p300_single"`).

*New in version 2.0.*

**pick_up_tip**(*self*, *location: 'Union[types.Location, labware.Well, labware.Labware, None]' = None*, *presses: 'Optional[int]' = None*, *increment: 'Optional[float]' = None*, *prep_after: 'Optional[bool]' = None*) → 'InstrumentContext'

Pick up a tip for the pipette to run liquid-handling commands.

See [Picking Up a Tip](https://docs.opentrons.com/v2/basic_commands/pipette_tips.html#basic-tip-pickup).

If no location is passed, the pipette will pick up the next available tip in its [`tip_racks`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.tip_racks) list. Within each tip rack, tips will be picked up in the order specified by the labware definition and [`Labware.wells()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware.wells). To adjust where the sequence starts, use [`starting_tip`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.starting_tip).

Parameters:

- **location** ([`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware) or [`types.Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location)) –

  The location from which to pick up a tip. The `location` argument can be specified in several ways:

  - As a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well). For example, `pipette.pick_up_tip(tiprack.wells()[0])` will always pick up the first tip in `tiprack`, even if the rack is not a member of [`InstrumentContext.tip_racks`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.tip_racks).
  - As a labware. `pipette.pick_up_tip(tiprack)` will pick up the next available tip in `tiprack`, even if the rack is not a member of [`InstrumentContext.tip_racks`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.tip_racks).
  - As a [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location). Use this to make fine adjustments to the pickup location. For example, to tell the robot to start its pick up tip routine 1 mm closer to the top of the well in the tip rack, call `pipette.pick_up_tip(tiprack["A1"].top(z=-1))`.

- **presses** ([*int*](https://docs.python.org/3/library/functions.html#int)) –

  The number of times to lower and then raise the pipette when picking up a tip, to ensure a good seal. Zero (`0`) will result in the pipette hovering over the tip but not picking it up (generally not desirable, but could be used for a dry run).

  *Deprecated since version 2.14:* Use the Opentrons App to change pipette pick-up settings.

  

- **increment** ([*float*](https://docs.python.org/3/library/functions.html#float)) –

  The additional distance to travel on each successive press. For example, if `presses=3` and `increment=1.0`, then the first press will travel down into the tip by 3.5 mm, the second by 4.5 mm, and the third by 5.5 mm).

  *Deprecated since version 2.14:* Use the Opentrons App to change pipette pick-up settings.

  

- **prep_after** ([*bool*](https://docs.python.org/3/library/functions.html#bool)) –

  Whether the pipette plunger should prepare itself to aspirate immediately after picking up a tip.

  If `True`, the pipette will move its plunger position to bottom in preparation for any following calls to [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate).

  If `False`, the pipette will prepare its plunger later, during the next call to [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate). This is accomplished by moving the tip to the top of the well, and positioning the plunger outside any potential liquids.

  > **Warning:**
  >
  > 
  >
  > This is provided for compatibility with older Python Protocol API behavior. You should normally leave this unset.
  >
  > Setting `prep_after=False` may create an unintended pipette movement, when the pipette automatically moves the tip to the top of the well to prepare the plunger.

*Changed in version 2.13:* Adds the `prep_after` argument. In version 2.12 and earlier, the plunger can’t prepare itself for aspiration during [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip), and will instead always prepare during [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate). Version 2.12 and earlier will raise an `APIVersionError` if a value is set for `prep_after`.

Returns:This instance.

*New in version 2.0.*



**prepare_to_aspirate**(*self*) → 'None'

Prepare a pipette for aspiration.

Before a pipette can aspirate into an empty tip, the plunger must be in its bottom position. After dropping a tip or blowing out, the plunger will be in a different position. This function moves the plunger to the bottom position, regardless of its current position, to make sure that the pipette is ready to aspirate.

You rarely need to call this function. The API automatically prepares the pipette for aspiration as part of other commands:

- After picking up a tip with [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip).
- When calling [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate), if the pipette isn’t already prepared. If the pipette is in a well, it will move out of the well, move the plunger, and then move back.

Use `prepare_to_aspirate` when you need to control exactly when the plunger motion will happen. A common use case is a pre-wetting routine, which requires preparing for aspiration, moving into a well, and then aspirating *without leaving the well*:

```python
pipette.move_to(well.bottom(z=2))
pipette.delay(5)
pipette.mix(10, 10)
pipette.move_to(well.top(z=5))
pipette.blow_out()
pipette.prepare_to_aspirate()
pipette.move_to(well.bottom(z=2))
pipette.delay(5)
pipette.aspirate(10, well.bottom(z=2))
```

The call to `prepare_to_aspirate()` means that the plunger will be in the bottom position before the call to `aspirate()`. Since it doesn’t need to prepare again, it will not move up out of the well to move the plunger. It will aspirate in place.

*New in version 2.16.*



**reset_tipracks**(*self*) → 'None'

Reload all tips in each tip rack and reset the starting tip.

*New in version 2.0.*

*property* **return_height***: [float](https://docs.python.org/3/library/functions.html#float)*[¶](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.return_height)

The height to return a tip to its tip rack.

Returns:A scaling factor to apply to the tip length. During [`drop_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.drop_tip), this factor is multiplied by the tip length to get the distance from the top of the well to drop the tip.

*New in version 2.2.*



**return_tip**(*self*, *home_after: 'Optional[bool]' = None*) → 'InstrumentContext'

Drop the currently attached tip in its original location in the tip rack.

Returning a tip does not reset tip tracking, so [`Well.has_tip`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well.has_tip) will remain `False` for the destination.

Returns:This instance.

Parameters:**home_after** – See the `home_after` parameter of [`drop_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.drop_tip).

*New in version 2.0.*



*property* **speed***: PlungerSpeeds*

The speeds (in mm/s) configured for the pipette plunger.

This is an object with attributes `aspirate`, `dispense`, and `blow_out` holding the plunger speeds for the corresponding operation.



> **Note:**
>
> 
>
> Setting values of [`flow_rate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate) will override the values in [`speed`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.speed).

*Changed in version 2.14:* This property has been removed because it’s fundamentally misaligned with the step-wise nature of a pipette’s plunger speed configuration. Use [`flow_rate`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.flow_rate) instead.

*New in version 2.0.*



*property* **starting_tip***: [Optional](https://docs.python.org/3/library/typing.html#typing.Optional)[[Well](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well)]*

Which well of a tip rack the pipette should start at when automatically choosing tips to pick up.

See [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip).

> **Note:**
>
> 
>
> In robot software versions 6.3.0 and 6.3.1, protocols specifying API level 2.14 ignored `starting_tip` on the second and subsequent calls to [`InstrumentContext.pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip) with no argument. This is fixed for all API levels as of robot software version 7.0.0.

*New in version 2.0.*

*property* **tip_racks***: [List](https://docs.python.org/3/library/typing.html#typing.List)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware)]*

The tip racks that have been linked to this pipette.

This is the property used to determine which tips to pick up next when calling [`pick_up_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.pick_up_tip) without arguments. See [Picking Up a Tip](https://docs.opentrons.com/v2/basic_commands/pipette_tips.html#basic-tip-pickup).

*New in version 2.0.*



**touch_tip**(*self*, *location: 'Optional[labware.Well]' = None*, *radius: 'float' = 1.0*, *v_offset: 'float' = - 1.0*, *speed: 'float' = 60.0*) → 'InstrumentContext'

Touch the pipette tip to the sides of a well, with the intent of removing leftover droplets.

See [Touch Tip](https://docs.opentrons.com/v2/basic_commands/liquids.html#touch-tip) for more details and examples.



Parameters:

- **location** ([`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) or `None`) – If no location is passed, the pipette will touch its tip at the edges of the current well.

- **radius** ([*float*](https://docs.python.org/3/library/functions.html#float)) – How far to move, as a proportion of the target well’s radius. When `radius=1.0`, the pipette tip will move all the way to the edge of the target well. When `radius=0.5`, it will move to 50% of the well’s radius. Default is 1.0 (100%)

- **v_offset** ([*float*](https://docs.python.org/3/library/functions.html#float)) – How far above or below the well to touch the tip, measured in mm. A positive offset moves the tip higher above the well. A negative offset moves the tip lower into the well. Default is -1.0 mm.

- **speed** ([*float*](https://docs.python.org/3/library/functions.html#float)) –

  The speed for touch tip motion, in mm/s.

  - Default: 60.0 mm/s
  - Maximum: 80.0 mm/s
  - Minimum: 1.0 mm/s

Raises:`UnexpectedTipRemovalError` – If no tip is attached to the pipette.

Raises:[**RuntimeError**](https://docs.python.org/3/library/exceptions.html#RuntimeError) – If no location is specified and the location cache is `None`. This should happen if `touch_tip` is called without first calling a method that takes a location, like [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) or [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense).

Returns:This instance.

*New in version 2.0.*

**transfer**(*self*, *volume: 'Union[float*, *Sequence[float]]'*, *source: 'AdvancedLiquidHandling'*, *dest: 'AdvancedLiquidHandling'*, *trash: 'bool' = True*, *\*\*kwargs: 'Any'*) → 'InstrumentContext'

Move liquid from one well or group of wells to another.

Transfer is a higher-level command, incorporating other [`InstrumentContext`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext) commands, like [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) and [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense). It makes writing a protocol easier at the cost of specificity. See [Complex Commands](https://docs.opentrons.com/v2/new_complex_commands.html#v2-complex-commands) for details on how transfer and other complex commands perform their component steps.

Parameters:

- **volume** – The amount, in µL, to aspirate from each source and dispense to each destination. If `volume` is a list, each amount will be used for the source and destination at the matching index. A list item of `0` will skip the corresponding wells entirely. See [List of Volumes](https://docs.opentrons.com/v2/complex_commands/order_operations.html#complex-list-volumes) for details and examples.
- **source** – A single well or a list of wells to aspirate liquid from.
- **dest** – A single well or a list of wells to dispense liquid into.

Keyword Arguments:

Transfer accepts a number of optional parameters that give you greater control over the exact steps it performs. See [Complex Liquid Handling Parameters](https://docs.opentrons.com/v2/complex_commands/parameters.html#complex-params) or the links under each argument’s entry below for additional details and examples.

- **new_tip** (*string*) – When to pick up and drop tips during the command. Defaults to `"once"`.

  - `"once"`: Use one tip for the entire command.
  - `"always"`: Use a new tip for each set of aspirate and dispense steps.
  - `"never"`: Do not pick up or drop tips at all.

  See [Tip Handling](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-tip-handling) for details.

- **trash** (*boolean*) – If `True` (default), the pipette will drop tips in its [`trash_container()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.trash_container). If `False`, the pipette will return tips to their tip rack.

  See [Trash Tips](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-trash) for details.

- **touch_tip** (*boolean*) – If `True`, perform a [`touch_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.touch_tip) following each [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) and [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense). Defaults to `False`.

  See [Touch Tip](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-touch-tip) for details.

- **blow_out** (*boolean*) – If `True`, a [`blow_out()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.blow_out) will occur following each [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense), but only if the pipette has no liquid left in it. If `False` (default), the pipette will not blow out liquid.

  See [Blow Out](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-blow-out) for details.

- **blowout_location** (*string*) – Accepts one of three string values: `"trash"`, `"source well"`, or `"destination well"`.

  If `blow_out` is `False` (its default), this parameter is ignored.

  If `blow_out` is `True` and this parameter is not set:

  * Blow out into the trash, if the pipette is empty or only contains the disposal volume.
  * Blow out into the source well, if the pipette otherwise contains liquid.

- **mix_before** (*tuple*) – Perform a [`mix()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.mix) before each [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) during the transfer. The first value of the tuple is the number of repetitions, and the second value is the amount of liquid to mix in µL.

  See [Mix Before](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-mix-before) for details.

- **mix_after** (*tuple*) – Perform a [`mix()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.mix) after each [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense) during the transfer. The first value of the tuple is the number of repetitions, and the second value is the amount of liquid to mix in µL.

  See [Mix After](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-mix-after) for details.

- **disposal_volume** (*float*) – Transfer ignores the numeric value of this parameter. If set, the pipette will not aspirate additional liquid, but it will perform a very small blow out after each dispense.

  See [Disposal Volume](https://docs.opentrons.com/v2/complex_commands/parameters.html#param-disposal-volume) for details.

Returns:This instance.

*New in version 2.0.*



*property* **trash_container***: [Union](https://docs.python.org/3/library/typing.html#typing.Union)[[Labware](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), TrashBin, WasteChute]*

The trash container associated with this pipette.

This is the property used to determine where to drop tips and blow out liquids when calling [`drop_tip()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.drop_tip) or [`blow_out()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.blow_out) without arguments.

You can set this to a [`Labware`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Labware), `TrashBin`, or `WasteChute`.

The default value depends on the robot type and API version:

- [`ProtocolContext.fixed_trash`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.fixed_trash), if it exists.
- Otherwise, the first item previously loaded with [`ProtocolContext.load_trash_bin()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_trash_bin) or [`ProtocolContext.load_waste_chute()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.ProtocolContext.load_waste_chute).

*Changed in version 2.16:* Added support for `TrashBin` and `WasteChute` objects.

*New in version 2.0.*



*property* **type***: [str](https://docs.python.org/3/library/stdtypes.html#str)*

`'single'` if this is a 1-channel pipette, or `'multi'` otherwise.

See also [`channels`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.channels), which can distinguish between 8-channel and 96-channel pipettes.

*New in version 2.0.*



*property* **well_bottom_clearance***: Clearances*

The distance above the bottom of a well to aspirate or dispense.

This is an object with attributes `aspirate` and `dispense`, describing the default height of the corresponding operation. The default is 1.0 mm for both aspirate and dispense.

When [`aspirate()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.aspirate) or [`dispense()`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.InstrumentContext.dispense) is given a [`Well`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.protocol_api.Well) rather than a full [`Location`](https://docs.opentrons.com/v2/new_protocol_api.html#opentrons.types.Location), the robot will move this distance above the bottom of the well to aspirate or dispense.

To change, set the corresponding attribute:

```python
pipette.well_bottom_clearance.aspirate = 2
```

*New in version 2.0.*



